export const data = JSON.parse("{\"key\":\"v-04e3b74c\",\"path\":\"/notes/datastr/tree.html\",\"title\":\"03.树专题\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"03.树专题\",\"toc\":\"content\",\"tocDepth\":4},\"excerpt\":\"<h1 id=\\\"树专题\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#树专题\\\" aria-hidden=\\\"true\\\">#</a> 树专题</h1>\\n<p><img src=\\\"https://p.ipic.vip/6lmcjx.jpg\\\" alt=\\\"\\\"></p>\\n<p>先上下本文的提纲，这个是我用 mindmap 画的一个脑图，之后我会继续完善，将其他专题逐步完善起来。</p>\\n<p>本系列包含以下专题：</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://lucifer.ren/blog/2020/11/08/linked-list/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">几乎刷完了力扣所有的链表题，我发现了这些东西。。。<ExternalLinkIcon/></a></p>\\n</li>\\n<li>\\n<p>几乎刷完了力扣所有的树题，我发现了这些东西。。。(就是本文)</p>\\n</li>\\n</ul>\\n<h2 id=\\\"一点絮叨\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#一点絮叨\\\" aria-hidden=\\\"true\\\">#</a> 一点絮叨</h2>\\n<p>首先亮一下本文的主角 - 树（我的化妆技术还行吧^_^）：</p>\\n<p><img src=\\\"https://p.ipic.vip/pe39ec.jpg\\\" alt=\\\"\\\"></p>\\n<p><a href=\\\"https://leetcode-cn.com/tag/tree/\\\" title=\\\"树标签\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">树标签<ExternalLinkIcon/></a>在 <code v-pre>leetcode</code> 一共有 <strong><code v-pre>175 道题</code></strong>。 为了准备这个专题，我花了几天时间将 leetcode 几乎所有的树题目都刷了一遍。</p>\\n<p><img src=\\\"https://p.ipic.vip/rsenck.jpg\\\" alt=\\\"\\\"></p>\\n<p>除了 35 个上锁的，1 个不能做的题（1628 题不知道为啥做不了）， 4 个标着树的标签但却是图的题目，其他我都刷了一遍。通过集中刷这些题，我发现了一些有趣的信息，今天就分享给大家。</p>\\n<h2 id=\\\"使用指南\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#使用指南\\\" aria-hidden=\\\"true\\\">#</a> 使用指南</h2>\\n<p>今天给大家带来的是《<a href=\\\"https://www.scaler.com/topics/data-structures/tree-data-structure/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">树<ExternalLinkIcon/></a>》专题。另外为了保持章节的聚焦性和实用性，省去了一些内容，比如哈夫曼树，前缀树，平衡二叉树（红黑树等），二叉堆。这些内容相对来说实用性没有那么强，如果大家对这些内容也感兴趣，可以关注下我的仓库 <a href=\\\"https://github.com/azl397985856/leetcode\\\" title=\\\"leetcode 算法题解\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">leetcode 算法题解<ExternalLinkIcon/></a>，大家有想看的内容也可以留言告诉我哦~</p>\\n<p>另外要提前告知大家的是本文所讲的很多内容都很依赖于递归。关于递归的练习我推荐大家把递归过程画到纸上，手动代入几次。等大脑熟悉了递归之后就不用这么辛苦了。 实在懒得画图的同学也可以找一个可视化递归的网站，比如 https://recursion.now.sh/。 等你对递归有了一定的理解之后就仔细研究一下树的各种遍历方法，再把本文看完，最后把文章末尾的题目做一做，搞定个递归问题不大。</p>\\n<blockquote>\\n<p>文章的后面《两个基本点 - 深度优先遍历》部分，对于如何练习树的遍历的递归思维我也提出了一种方法</p>\\n</blockquote>\\n<p>最后要强调的是，本文只是帮助你搞定树题目的常见套路，但不是说树的所有题目涉及的考点都讲。比如树状 DP 这种不在本文的讨论范围，因为这种题更侧重的是 DP，如果你不懂 DP 多半是做不出来的，你需要的是学完树和 DP 之后再去学树状 DP。如果你对这些内容感兴趣，可以期待我的后续专题。</p>\\n<h2 id=\\\"前言\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#前言\\\" aria-hidden=\\\"true\\\">#</a> 前言</h2>\\n<p>提到树大家更熟悉的是现实中的树，而现实中的树是这样的：</p>\\n<p><img src=\\\"https://p.ipic.vip/b170o8.jpg\\\" alt=\\\"\\\"></p>\\n<p>而计算机中的树其实是现实中的树的倒影。</p>\\n<p><img src=\\\"https://p.ipic.vip/dkkqya.jpg\\\" alt=\\\"\\\"></p>\\n<p>计算机的数据结构是对现实世界物体间关系的一种抽象。比如家族的族谱，公司架构中的人员组织关系，电脑中的文件夹结构，html 渲染的 dom 结构等等，这些有层次关系的结构在计算机领域都叫做树。</p>\\n<p>首先明确一下，树其实是一种逻辑结构。比如笔者平时写复杂递归的时候，尽管笔者做的题目不是树，也会画一个递归树帮助自己理解。</p>\\n<blockquote>\\n<p>树是一种重要的思维工具</p>\\n</blockquote>\\n<p>以最简单的计算 fibonacci 数列为例：</p>\\n<div class=\\\"language-javascript line-numbers-mode\\\" data-ext=\\\"js\\\"><pre v-pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><p>很明显它的入参和返回值都不是树，但是却不影响我们用树的思维去思考。</p>\\n<p>继续回到上面的代码，根据上面的代码可以画出如下的递归树。</p>\\n<p><img src=\\\"https://p.ipic.vip/bcwh8q.jpg\\\" alt=\\\"\\\"></p>\\n<p>其中树的边表示的是返回值，树节点表示的是需要计算的值，即 fn(n）。</p>\\n<p>以计算 5 的 fibbonacci 为例，过程大概是这样的（动图演示）：</p>\\n<p><img src=\\\"https://p.ipic.vip/tq20mp.gif\\\" alt=\\\"\\\"></p>\\n<p><strong>这其实就是一个树的后序遍历</strong>，你说树（逻辑上的树）是不是很重要？关于后序遍历咱们后面再讲，现在大家知道是这么回事就行。</p>\\n<p>大家也可以去 <a href=\\\"https://recursion.now.sh/\\\" title=\\\"递归可视化网站\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">这个网站<ExternalLinkIcon/></a> 查看上面算法的单步执行效果。当然这个网站还有更多的算法的动画演示。</p>\\n<blockquote>\\n<p>上面的图箭头方向是为了方便大家理解。其实箭头方向变成向下的才是真的树结构。</p>\\n</blockquote>\\n<p>广义的树真的很有用，但是它范围太大了。 本文所讲的树的题目是比较狭隘的树，指的是输入（参数）或者输出（返回值）是树结构的题目。</p>\\n\",\"headers\":[{\"level\":2,\"title\":\"一点絮叨\",\"slug\":\"一点絮叨\",\"link\":\"#一点絮叨\",\"children\":[]},{\"level\":2,\"title\":\"使用指南\",\"slug\":\"使用指南\",\"link\":\"#使用指南\",\"children\":[]},{\"level\":2,\"title\":\"前言\",\"slug\":\"前言\",\"link\":\"#前言\",\"children\":[{\"level\":3,\"title\":\"基本概念\",\"slug\":\"基本概念\",\"link\":\"#基本概念\",\"children\":[]},{\"level\":3,\"title\":\"二叉树\",\"slug\":\"二叉树\",\"link\":\"#二叉树\",\"children\":[]}]},{\"level\":2,\"title\":\"树题难度几何？\",\"slug\":\"树题难度几何\",\"link\":\"#树题难度几何\",\"children\":[]},{\"level\":2,\"title\":\"一个中心\",\"slug\":\"一个中心\",\"link\":\"#一个中心\",\"children\":[{\"level\":3,\"title\":\"树的遍历迭代写法\",\"slug\":\"树的遍历迭代写法\",\"link\":\"#树的遍历迭代写法\",\"children\":[]},{\"level\":3,\"title\":\"小结\",\"slug\":\"小结\",\"link\":\"#小结\",\"children\":[]}]},{\"level\":2,\"title\":\"两个基本点\",\"slug\":\"两个基本点\",\"link\":\"#两个基本点\",\"children\":[{\"level\":3,\"title\":\"BFS 不是 层次遍历\",\"slug\":\"bfs-不是-层次遍历\",\"link\":\"#bfs-不是-层次遍历\",\"children\":[]},{\"level\":3,\"title\":\"深度优先遍历\",\"slug\":\"深度优先遍历\",\"link\":\"#深度优先遍历\",\"children\":[]},{\"level\":3,\"title\":\"广度优先遍历\",\"slug\":\"广度优先遍历\",\"link\":\"#广度优先遍历\",\"children\":[]},{\"level\":3,\"title\":\"小结\",\"slug\":\"小结-1\",\"link\":\"#小结-1\",\"children\":[]}]},{\"level\":2,\"title\":\"三种题型\",\"slug\":\"三种题型\",\"link\":\"#三种题型\",\"children\":[{\"level\":3,\"title\":\"搜索类\",\"slug\":\"搜索类\",\"link\":\"#搜索类\",\"children\":[]},{\"level\":3,\"title\":\"构建类\",\"slug\":\"构建类\",\"link\":\"#构建类\",\"children\":[]},{\"level\":3,\"title\":\"修改类\",\"slug\":\"修改类\",\"link\":\"#修改类\",\"children\":[]}]},{\"level\":2,\"title\":\"四个重要概念\",\"slug\":\"四个重要概念\",\"link\":\"#四个重要概念\",\"children\":[{\"level\":3,\"title\":\"二叉搜索树\",\"slug\":\"二叉搜索树\",\"link\":\"#二叉搜索树\",\"children\":[]},{\"level\":3,\"title\":\"完全二叉树\",\"slug\":\"完全二叉树\",\"link\":\"#完全二叉树\",\"children\":[]},{\"level\":3,\"title\":\"路径\",\"slug\":\"路径\",\"link\":\"#路径\",\"children\":[]},{\"level\":3,\"title\":\"距离\",\"slug\":\"距离\",\"link\":\"#距离\",\"children\":[]}]},{\"level\":2,\"title\":\"七个技巧\",\"slug\":\"七个技巧\",\"link\":\"#七个技巧\",\"children\":[{\"level\":3,\"title\":\"dfs(root)\",\"slug\":\"dfs-root\",\"link\":\"#dfs-root\",\"children\":[]},{\"level\":3,\"title\":\"单/双递归\",\"slug\":\"单-双递归\",\"link\":\"#单-双递归\",\"children\":[]},{\"level\":3,\"title\":\"前后遍历\",\"slug\":\"前后遍历\",\"link\":\"#前后遍历\",\"children\":[]},{\"level\":3,\"title\":\"虚拟节点\",\"slug\":\"虚拟节点\",\"link\":\"#虚拟节点\",\"children\":[]},{\"level\":3,\"title\":\"边界\",\"slug\":\"边界\",\"link\":\"#边界\",\"children\":[]},{\"level\":3,\"title\":\"参数扩展大法\",\"slug\":\"参数扩展大法\",\"link\":\"#参数扩展大法\",\"children\":[]},{\"level\":3,\"title\":\"返回元组/列表\",\"slug\":\"返回元组-列表\",\"link\":\"#返回元组-列表\",\"children\":[]}]},{\"level\":2,\"title\":\"经典题目\",\"slug\":\"经典题目\",\"link\":\"#经典题目\",\"children\":[]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"git\":{\"updatedTime\":null,\"contributors\":[]},\"filePathRelative\":\"notes/datastr/tree.md\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
