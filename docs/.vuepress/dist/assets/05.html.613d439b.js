import{_ as e,r as o,o as i,c,a as n,b as s,d as t,e as p}from"./app.8f1211c8.js";const l={},u=p(`<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h1><p>图论〔Graph Theory〕是数学的一个分支。它以图为研究对象。图论中的图是由若干给定的点及连接两点的线所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系，用点代表事物，用连接两点的线表示相应两个事物间具有这种关系。</p><p>\b 如下就是一种逻辑上的图结构：</p><p><img src="https://p.ipic.vip/7jm3eo.jpg" alt="逻辑上的图结构"></p><p>图是一种最复杂的数据结构，前面讲的数据结构都可以看成是图的特例。那为什么不都用图就好了，还要分那么多种数据结构呢？</p><p>这是因为很多时候不需要用到那么复杂的功能，图的很多特性都不具备，如果笼统地都称为图那么非常不利于沟通。你想你和别人沟通总不至于说这道题是考察一种特殊的图，这种图。。。。 这未免太啰嗦了，因此给其他图的特殊的图起了特殊的名字，这样就方便沟通了。直到遇到了非常复杂的情况，我们才会用到 <strong>”真正“的图</strong>。</p><p>前面章节提到了<strong>数据结构就是为了算法服务的，数据结构就是存储数据用的，目的是为了更高效。</strong> 那么什么时候需要用图来存储数据，在这种情况图高效在哪里呢？答案很简单，那就是如果你用其他简单的数据结构无法很好地进行存储，就应该使用图了。 比如我们需要存储一种双向的朋友关系，并且这种朋友关系是多对多的，那就一定要用到图，因为其他数据结构无法模拟。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="无向图-有向图〔undirected-graph-deriected-graph〕" tabindex="-1"><a class="header-anchor" href="#无向图-有向图〔undirected-graph-deriected-graph〕" aria-hidden="true">#</a> 无向图 &amp; 有向图〔Undirected Graph &amp; Deriected Graph〕</h3><p>前面提到了二叉树完全可以实现其他树结构，类似地，有向图也完全可以实现无向图和混合图，因此有向图的研究一直是重点考察对象。</p><p><strong>本文讲的所有图都是有向图</strong>。</p><p>前面提到了我们用连接两点的线表示相应两个事物间具有这种关系。因此如果两个事物间的关系是有方向的，就是有向图，否则就是无向图。比如：A 认识 B，那么 B 不一定认识 A。那么关系就是单向的，我们需要用有向图来表示。因为如果用无向图表示，我们无法区分 A 和 B 的边表示的是 A 认识 B 还是 B 认识 A。</p><p>习惯上，我们画图的时候用带箭头的表示有向图，不带箭头的表示无向图。</p><h3 id="有权图-无权图〔weighted-graph-unweighted-graph〕" tabindex="-1"><a class="header-anchor" href="#有权图-无权图〔weighted-graph-unweighted-graph〕" aria-hidden="true">#</a> 有权图 &amp; 无权图〔Weighted Graph &amp; Unweighted Graph〕</h3><p>如果边是有权重的是有权图（或者带权图），否则是无权图（或不带权图）。那么什么是有权重呢？比如汇率就是一种有权重的逻辑图。1 货币 A 兑换 5 货币 B，那么我们 A 和 B 的边的权重就是 5。而像朋友这种关系，就可以看做一种不带权的图。</p><h3 id="入度-出度〔indegree-outdegree〕" tabindex="-1"><a class="header-anchor" href="#入度-出度〔indegree-outdegree〕" aria-hidden="true">#</a> 入度 &amp; 出度〔Indegree &amp; Outdegree〕</h3><p>有多少边指向节点 A，那么节点 A 的入度就是多少。同样地，有多少边从 A 发出，那么节点 A 的出度就是多少。</p><p>仍然以上面的图为例，这幅图的所有节点的入度和出度都为 1。</p><p><img src="https://p.ipic.vip/r4js08.jpg" alt=""></p><h3 id="路径-环〔路径-path〕" tabindex="-1"><a class="header-anchor" href="#路径-环〔路径-path〕" aria-hidden="true">#</a> 路径 &amp; 环〔路径：Path〕</h3><ul><li>有环图〔Cyclic Graph〕 上面的图就是一个有环图，因为我们从图中的某一个点触发，能够重新回到起点。这和现实中的环是一样的。</li><li>无环图〔Acyclic Graph〕</li></ul><p>我可以将上面的图稍加改造就变成了无环图，此时没有任何一个环路。</p><p><img src="https://p.ipic.vip/6suzbw.jpg" alt=""></p><h3 id="连通图-强连通图" tabindex="-1"><a class="header-anchor" href="#连通图-强连通图" aria-hidden="true">#</a> 连通图 &amp; 强连通图</h3><p>在无向图中，若<strong>任意两个顶点</strong> i 与 j 都有路径<strong>相通</strong>，则称该无向图为连通图。</p><p>在有向图中，若<strong>任意两个顶点</strong> i 与 j 都有路径<strong>相通</strong>，则称该有向图为强连通图。</p><h3 id="生成树" tabindex="-1"><a class="header-anchor" href="#生成树" aria-hidden="true">#</a> 生成树</h3><p>一个连通图的生成树是指一个连通子图，它含有图中全部 n 个顶点，但只有足以构成一棵树的 n-1 条边。一颗有 n 个顶点的生成树有且仅有 n-1 条边，如果生成树中再添加一条边，则必定成环。在连通网的所有生成树中，所有边的<strong>代价和最小</strong>的生成树，称为最小生成树，其中<strong>代价和</strong>指的是所有边的权重和。</p><h2 id="图的建立" tabindex="-1"><a class="header-anchor" href="#图的建立" aria-hidden="true">#</a> 图的建立</h2><p>一般图的题目都不会给你一个现成的图的数据结构。当你知道这是一个图的题目的时候，解题的第一步通常就是建图。</p><p>上面讲的都是图的逻辑结构，那么计算机中的图如何存储呢？</p><p>我们知道图是有点和边组成的。理论上，我们只要存储图中的所有的边关系即可，因为边中已经包含了两个点的关系。</p><p>这里我简单介绍两种常见的建图方式：邻接矩阵（常用，重要）和邻接表。</p><h3 id="邻接矩阵-常见-〔adjacency-matrixs〕" tabindex="-1"><a class="header-anchor" href="#邻接矩阵-常见-〔adjacency-matrixs〕" aria-hidden="true">#</a> 邻接矩阵（常见）〔Adjacency Matrixs〕</h3><p>第一种方式是使用数组或者哈希表来存储图，这里我们用二维数组来存储。</p><p>使用一个 n * n 的矩阵来描述图 graph，其就是一个二维的矩阵，其中 graph[i][j] 描述边的关系。</p><p>一般而言，对于无权图我都用 graph[i][j] = 1 来表示 顶点 i 和顶点 j 之间有一条边，并且边的指向是从 i 到 j。用 graph[i][j] = 0 来表示 顶点 i 和顶点 j 之间不存在一条边。 对于有权图来说，我们可以存储其他数字，表示的是权重。</p><p><img src="https://p.ipic.vip/g6qhtl.jpg" alt=""></p><p>可以看出上图是对角线对称的，这样我们只需看一半就好了，这就造成了一半的空间浪费。</p><p>这种存储方式的空间复杂度为 O(n ^ 2)，其中 n 为顶点个数。如果是稀疏图（图的边的数目远小于顶点的数目），那么会很浪费空间。并且如果图是无向图，始终至少会有 50 % 的空间浪费。下面的图也直观地反应了这一点。</p><p>邻接矩阵的优点主要有：</p><ol><li><p>直观，简单。</p></li><li><p>判断两个顶点是否连接，获取入度和出度以及更新度数，时间复杂度都是 O(1)</p></li></ol><p>由于使用起来比较简单， 因此我的所有的需要建图的题目基本都用这种方式。</p><p>比如力扣 743. 网络延迟时间。 题目描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>有 N 个网络节点，标记为 1 到 N。

给定一个列表 times，表示信号经过有向边的传递时间。 times[i] = (u, v, w)，其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。

现在，我们从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1。


示例：

输入：times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
输出：2
 

注意:

N 的范围在 [1, 100] 之间。
K 的范围在 [1, N] 之间。
times 的长度在 [1, 6000] 之间。
所有的边 times[i] = (u, v, w) 都有 1 &lt;= u, v &lt;= N 且 0 &lt;= w &lt;= 100。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个典型的图的题目，对于这道题，我们如何用邻接矩阵建图呢？</p><p>一个典型的建图代码：</p><p>使用哈希表构建邻接矩阵：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    graph <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> fr<span class="token punctuation">,</span> to<span class="token punctuation">,</span> w <span class="token keyword">in</span> times<span class="token punctuation">:</span>
        graph<span class="token punctuation">[</span>fr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用二维数组构建邻接矩阵：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 新建一个 m * n 的二维矩阵</span>

<span class="token keyword">for</span> fr<span class="token punctuation">,</span> to<span class="token punctuation">,</span> w <span class="token keyword">in</span> times<span class="token punctuation">:</span>
    graph<span class="token punctuation">[</span>fr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就构造了一个临界矩阵，之后我们基于这个邻接矩阵遍历图即可。</p><h3 id="邻接表〔adjacency-list〕" tabindex="-1"><a class="header-anchor" href="#邻接表〔adjacency-list〕" aria-hidden="true">#</a> 邻接表〔Adjacency List〕</h3><p>对于每个点，存储着一个链表，用来指向所有与该点直接相连的点。对于有权图来说，链表中元素值对应着权重。</p><p>例如在无向无权图中：</p><p><img src="https://p.ipic.vip/i1t6uf.jpg" alt="graph-1"> （图片来自 https://zhuanlan.zhihu.com/p/25498681）</p><p>可以看出在无向图中，邻接矩阵关于对角线对称，而邻接链表总有两条对称的边。</p><p>而在有向无权图中：</p><p><img src="https://p.ipic.vip/g1v1ts.jpg" alt="graph-2"></p><p>（图片来自 https://zhuanlan.zhihu.com/p/25498681）</p><p>由于邻接表使用起来稍微麻烦一点，另外也不常用。为了减少初学者的认知负担，我就不贴代码了。</p><h2 id="图的遍历" tabindex="-1"><a class="header-anchor" href="#图的遍历" aria-hidden="true">#</a> 图的遍历</h2><p>图建立好了，接下来就是要遍历了。</p><p>不管你是什么算法，肯定都要遍历的，一般有这两种方法：深度优先搜索，广度优先搜索（其他奇葩的遍历方式实际意义不大，没有必要学习）。</p><p>不管是哪一种遍历， 如果图有环，就一定要记录节点的访问情况，防止死循环。当然你可能不需要真正地使用一个集合记录节点的访问情况，比如使用一个数据范围外的数据原地标记，这样的空间复杂度会是 $O(1)$。</p><p>这里以有向图为例， 有向图也是类似，这里不再赘述。</p><blockquote><p>关于图的搜索，后面的搜索专题也会做详细的介绍，因此这里就点到为止。</p></blockquote><h3 id="深度优先遍历〔depth-first-search-dfs〕" tabindex="-1"><a class="header-anchor" href="#深度优先遍历〔depth-first-search-dfs〕" aria-hidden="true">#</a> 深度优先遍历〔Depth First Search, DFS〕</h3><p>深度优先遍历图的方法是，从图中某顶点 v 出发， 不断访问邻居， 邻居的邻居直到访问完毕。</p><p><img src="https://p.ipic.vip/fqq7k0.jpg" alt=""></p><p>如上图， 如果我们使用 DFS，并且从 A 节点开始的话， <strong>一个可能的</strong>的访问顺序是： <strong>A -&gt; C -&gt; B -&gt; D -&gt; F -&gt; G -&gt; E</strong>，当然也可能是 <strong>A -&gt; D -&gt; C -&gt; B -&gt; F -&gt; G -&gt; E</strong> 等，具体取决于你的代码，但他们都是深度优先的。</p><h3 id="广度优先搜索〔breadth-first-search-bfs〕" tabindex="-1"><a class="header-anchor" href="#广度优先搜索〔breadth-first-search-bfs〕" aria-hidden="true">#</a> 广度优先搜索〔Breadth First Search, BFS〕</h3><p>广度优先搜索，可以被形象地描述为 &quot;浅尝辄止&quot;，它也需要一个队列以保持遍历过的顶点顺序，以便按出队的顺序再去访问这些顶点的邻接顶点。</p><p><img src="https://p.ipic.vip/eq4g1r.jpg" alt=""></p><p>如上图， 如果我们使用 BFS，并且从 A 节点开始的话， <strong>一个可能的</strong>的访问顺序是： <strong>A -&gt; B -&gt; C -&gt; F -&gt; E -&gt; G -&gt; D</strong>，当然也可能是 <strong>A -&gt; B -&gt; F -&gt; E -&gt; C -&gt; G -&gt; D</strong> 等，具体取决于你的代码，但他们都是广度优先的。</p><p>需要注意的是 DFS 和 BFS 只是一种算法思想，不是一种具体的算法。 因此其有着很强的适应性，而不是局限于特点的数据结构的，本文讲的图可以用，前面讲的树也可以用。实际上， 只要是<strong>非线性的数据结构都可以用</strong>。</p><h2 id="常见算法" tabindex="-1"><a class="header-anchor" href="#常见算法" aria-hidden="true">#</a> 常见算法</h2><p>图的题目的算法比较适合套模板。</p><p>这里介绍几种常见的板子题。主要有：</p><ul><li>Dijkstra</li><li>Floyd-Warshall</li><li>最小生成树（Kruskal &amp; Prim） 目前此小节已经删除，觉得自己写的不够详细，之后补充完成会再次开放。</li><li>A 星寻路算法</li><li>二分图（染色法）〔Bipartitie〕</li><li>拓扑排序〔Topological Sort〕</li></ul><p>下面列举常见算法的模板。</p><blockquote><p>以下所有的模板都是基于邻接矩阵建图。</p></blockquote>`,82),r={href:"https://leetcode-cn.com/problems/maximum-path-quality-of-a-graph/",title:"最大化一张图中的路径价值",target:"_blank",rel:"noopener noreferrer"},d=p(`<h3 id="最短距离-最短路径" tabindex="-1"><a class="header-anchor" href="#最短距离-最短路径" aria-hidden="true">#</a> 最短距离，最短路径</h3><h4 id="dijkstra-算法" tabindex="-1"><a class="header-anchor" href="#dijkstra-算法" aria-hidden="true">#</a> Dijkstra 算法</h4><p>DIJKSTRA 基本思想是广度优先遍历。实际上搜索的最短路算法基本思想都是广度优先，只不过具体的扩展策略不同而已。</p><p>DIJKSTRA 算法主要解决的是图中<strong>任意一点</strong>到图中<strong>另外任意一个点</strong>的最短距离，即单源最短路径。</p><blockquote><p>Dijkstra 这个名字比较难记，大家可以简单记为<strong>DJ 算法</strong>，有没有好记很多？</p></blockquote><p>比如给你几个城市，以及城市之间的距离。让你规划一条最短的从城市 a 到城市 b 的路线。</p><p>这个问题，我们就可以先将城市间的距离用图建立出来，然后使用 dijkstra 来做。那么 dijkstra 究竟如何计算最短路径的呢？</p><p>dj 算法的基本思想是贪心。从起点 start 开始，每次都遍历所有邻居，并从中找到距离最小的，本质上是一种广度优先遍历。这里我们借助堆这种数据结构，使得可以在 $logN$ 的时间内找到 cost 最小的点。</p><blockquote><p>而如果使用普通的队列的话，其实是图中所有边权值都相同的特殊情况。</p></blockquote><p>比如我们要找从点 start 到点 end 的最短距离。我们期望 dj 算法是这样被使用的。</p><p>比如一个图是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>E -- 1 --&gt; B -- 1 --&gt; C -- 1 --&gt; D -- 1 --&gt; F
 \\                                         /\\
  \\                                        ||
    -------- 2 ---------&gt; G ------- 1 ------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用邻接矩阵来构造：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>G <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;B&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;D&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;E&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;F&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;G&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

shortDistance <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>shortDistance<span class="token punctuation">)</span>  <span class="token comment"># E -- 3 --&gt; F -- 3 --&gt; C == 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体算法：</p><ol><li>初始化堆。堆里的数据都是 (cost, v) 的二元祖，其含义是“从 start 走到 v 的距离是 cost”。因此初始情况，堆中存放元组 (0, start)</li><li>从堆中 pop 出来一个 (cost, v)，第一次 pop 出来的一定是 (0, start)。 如果 v 被访问过了，那么跳过，防止环的产生。</li><li>如果 v 是 我们要找的终点，直接返回 cost，此时的 cost 就是从 start 到 该点的最短距离</li><li>否则，将 v 的邻居入堆，即将 (neibor, cost + c) 加入堆。其中 neibor 为 v 的邻居， c 为 v 到 neibor 的距离（也就是转移的代价）。</li></ol><p>重复执行 2 - 4 步</p><p>代码模板：</p><p>Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq


<span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 堆里的数据都是 (cost, i) 的二元祖，其含义是“从 start 走到 i 的距离是 cost”。</span>
    heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">]</span>
    visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> heap<span class="token punctuation">:</span>
        <span class="token punctuation">(</span>cost<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>
        <span class="token keyword">if</span> u <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
        <span class="token keyword">if</span> u <span class="token operator">==</span> end<span class="token punctuation">:</span>
            <span class="token keyword">return</span> cost
        <span class="token keyword">for</span> v<span class="token punctuation">,</span> c <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> v <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token builtin">next</span> <span class="token operator">=</span> cost <span class="token operator">+</span> c
            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>const dijkstra = (graph, start, end) =&gt; {
  const visited = new Set()
  const minHeap = new MinPriorityQueue();
  //注：此处new MinPriorityQueue()用了LC的内置API，它的enqueue由两个部分组成：
  //element 和 priority。
  //堆会按照priority排序，可以用element记录一些内容。
  minHeap.enqueue(startPoint, 0)

  while(!minHeap.isEmpty()){
    const {element, priority} = minHeap.dequeue();
    //下面这两个变量不是必须的，只是便于理解
    const curPoint = element;
    const curCost = priority;

    if(curPoint === end) return curCost;
    if(visited.has(curPoint)) continue;
    visited.add(curPoint);

    if(!graph[curPoint]) continue;
    for(const [nextPoint, nextCost] of graph[curPoint]){
      if(visited.has(nextPoint)) continue;
      //注意heap里面的一定是从startPoint到某个点的距离；
      //curPoint到nextPoint的距离是nextCost；但curPoint不一定是startPoint。
      const accumulatedCost = nextCost + curCost;
      minHeap.enqueue(nextPoint, accumulatedCost);
    }
  }
  return -1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会了这个算法模板， 你就可以去 AC 743. 网络延迟时间 了。</p><p>这里提供完整代码供大家参考：</p><p>Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">]</span>
        visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> heap<span class="token punctuation">:</span>
            <span class="token punctuation">(</span>cost<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>
            <span class="token keyword">if</span> u <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
            <span class="token keyword">if</span> u <span class="token operator">==</span> end<span class="token punctuation">:</span>
                <span class="token keyword">return</span> cost
            <span class="token keyword">for</span> v<span class="token punctuation">,</span> c <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> v <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token builtin">next</span> <span class="token operator">=</span> cost <span class="token operator">+</span> c
                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> times<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> K<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        graph <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> fr<span class="token punctuation">,</span> to<span class="token punctuation">,</span> w <span class="token keyword">in</span> times<span class="token punctuation">:</span>
            graph<span class="token punctuation">[</span>fr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">for</span> to <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dist <span class="token operator">=</span> self<span class="token punctuation">.</span>dijkstra<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span>
            <span class="token keyword">if</span> dist <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dist<span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>const networkDelayTime = (times, n, k) =&gt; {
    //咳咳这个解法并不是Dijkstra在本题的最佳解法
    const graph = {};
    for(const [from, to, weight] of times){
        if(!graph[from]) graph[from] = [];
        graph[from].push([to, weight]);
    }

    let ans = -1;
    for(let to = 1; to &lt;= n; to++){
        let dist = dikstra(graph, k, to)
        if(dist === -1) return -1;
        ans = Math.max(ans, dist);
    }
    return ans;
};

const dijkstra = (graph, startPoint, endPoint) =&gt; {
  const visited = new Set()
  const minHeap = new MinPriorityQueue();
  //注：此处new MinPriorityQueue()用了LC的内置API，它的enqueue由两个部分组成：
  //element 和 priority。
  //堆会按照priority排序，可以用element记录一些内容。
  minHeap.enqueue(startPoint, 0)

  while(!minHeap.isEmpty()){
    const {element, priority} = minHeap.dequeue();
    //下面这两个变量不是必须的，只是便于理解
    const curPoint = element;
    const curCost = priority;
    if(visited.has(curPoint)) continue;
    visited.add(curPoint)
    if(curPoint === endPoint) return curCost;

    if(!graph[curPoint]) continue;
    for(const [nextPoint, nextCost] of graph[curPoint]){
      if(visited.has(nextPoint)) continue;
      //注意heap里面的一定是从startPoint到某个点的距离；
      //curPoint到nextPoint的距离是nextCost；但curPoint不一定是startPoint。
      const accumulatedCost = nextCost + curCost;
      minHeap.enqueue(nextPoint, accumulatedCost);
    }
  }
  return -1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DJ 算法的时间复杂度为 $vlogv+e$，其中 v 和 e 分别为图中的点和边的个数。</p><p>最后给大家留一个思考题：如果是计算一个点到图中<strong>所有点</strong>的距离呢？我们的算法会有什么样的调整？</p><blockquote><p>提示：你可以使用一个 dist 哈希表记录开始点到每个点的最短距离来完成。想出来的话，可以用力扣 882 题去验证一下哦~</p></blockquote><p>值得注意的是， Dijkstra 无法处理边权值为负的情况。即如果出现负权值的边，那么答案可能不正确。而基于动态规划算法的最短路（下文会讲）则可以处理这种情况。</p><h4 id="floyd-warshall-算法" tabindex="-1"><a class="header-anchor" href="#floyd-warshall-算法" aria-hidden="true">#</a> Floyd-Warshall 算法</h4><p>Floyd-Warshall 可以<strong>解决任意两个点距离</strong>，即多源最短路径，这点和 dj 算法不一样。</p><p>除此之外，贝尔曼-福特算法也是解决最短路径的经典动态规划算法，这点和 dj 也是不一样的，dj 是基于贪心的。</p><p>相比上面的 dijkstra 算法， 由于其计算过程会把中间运算结果保存起来防止重复计算，因此其特别适合<strong>求图中任意两点的距离</strong>，比如力扣的 1462. 课程安排 IV。除了这个优点。下文要讲的贝尔曼-福特算法相比于此算法最大的区别在于本算法是多源最短路径，而贝尔曼-福特则是单源最短路径。不管是复杂度和写法， 贝尔曼-福特算法都更简单，我们后面给大家介绍。</p><blockquote><p>当然就不是说贝尔曼算法以及上面的 dijkstra 就不支持多源最短路径，你只需要加一个 for 循环枚举所有的起点罢了。</p></blockquote><p>还有一个非常重要的点是 Floyd-Warshall 算法由于使用了<strong>动态规划</strong>的思想而不是贪心，因此其<strong>可以处理负权重</strong>的情况，这点需要大家尤为注意。 动态规划的详细内容请参考之后的<strong>动态规划专题</strong>和<strong>背包问题</strong>。</p><p>算法也不难理解，简单来说就是： <strong>i 到 j 的最短路径 = i 到 k 的最短路径 + k 到 j 的最短路径</strong>的最小值。如下图：</p><p><img src="https://p.ipic.vip/592ov2.jpg" alt=""></p><p>u 到 v 的最短距离是 u 到 x 的最短距离 + x 到 v 的最短距离。上图 x 是 u 到 v 的必经之路，如果不是的话，我们需要多个中间节点的值，并取最小的。</p><p>算法的正确性不言而喻，因为从 i 到 j，要么直接到，要么经过图中的另外一个点 k，中间节点 k 可能有多个，经过中间点的情况取出最小的，自然就是 i 到 j 的最短距离。</p><blockquote><p>思考题： 最长无环路径可以用动态规划来解么？</p></blockquote><p>该算法的时间复杂度是 $O(N^3)$，空间复杂度是 $O(N^2)$，其中 N 为顶点个数。</p><p>代码模板：</p><p>Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># graph 是邻接矩阵，n 是顶点个数</span>
<span class="token comment"># graph 形如： graph[u][v] = w</span>

<span class="token keyword">def</span> <span class="token function">floyd_warshall</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>

    <span class="token comment"># check vertex k against all other vertices (i, j)</span>
    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># looping through rows of graph array</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># looping through columns of graph array</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>
                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
                    <span class="token keyword">and</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
                    <span class="token keyword">and</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token punctuation">)</span><span class="token punctuation">:</span>
                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">return</span> dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>const floydWarshall = (graph, v)=&gt;{
  const dist = new Array(v).fill(0).map(() =&gt; new Array(v).fill(Number.MAX_SAFE_INTEGER))

  for(let i = 0; i &lt; v; i++){
    for(let j = 0; j &lt; v; j++){
      //两个点相同，距离为0
      if(i === j) dist[i][j] = 0;
      //i 和 j 的距离已知
      else if(graph[i][j]) dist[i][j] = graph[i][j];
      //i 和 j 的距离未知，默认是最大值
      else dist[i][j] = Number.MAX_SAFE_INTEGER;
    }
  }

  //检查是否有一个点 k 使得 i 和 j 之间距离更短，如果有，则更新最短距离
  for(let k = 0; k &lt; v; k++){
    for(let i = 0; i &lt; v; i++){
      for(let j = 0; j &lt; v; j++){
        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j])
      }
    }
  }
  return 看需要
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回过头来看下如何套模板解决 力扣的 1462. 课程安排 IV，题目描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>你总共需要上 n 门课，课程编号依次为 0 到 n-1 。

有的课会有直接的先修课程，比如如果想上课程 0 ，你必须先上课程 1 ，那么会以 [1,0] 数对的形式给出先修课程数对。

给你课程总数 n 和一个直接先修课程数对列表 prerequisite 和一个查询对列表 queries 。

对于每个查询对 queries[i] ，请判断 queries[i][0] 是否是 queries[i][1] 的先修课程。

请返回一个布尔值列表，列表中每个元素依次分别对应 queries 每个查询对的判断结果。

注意：如果课程 a 是课程 b 的先修课程且课程 b 是课程 c 的先修课程，那么课程 a 也是课程 c 的先修课程。

 

示例 1：



输入：n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
输出：[false,true]
解释：课程 0 不是课程 1 的先修课程，但课程 1 是课程 0 的先修课程。
示例 2：

输入：n = 2, prerequisites = [], queries = [[1,0],[0,1]]
输出：[false,false]
解释：没有先修课程对，所以每门课程之间是独立的。
示例 3：



输入：n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
输出：[true,true]
示例 4：

输入：n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]
输出：[false,true]
示例 5：

输入：n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]
输出：[true,false,true,false]
 

提示：

2 &lt;= n &lt;= 100
0 &lt;= prerequisite.length &lt;= (n * (n - 1) / 2)
0 &lt;= prerequisite[i][0], prerequisite[i][1] &lt; n
prerequisite[i][0] != prerequisite[i][1]
先修课程图中没有环。
先修课程图中没有重复的边。
1 &lt;= queries.length &lt;= 10^4
queries[i][0] != queries[i][1]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这道题也可以使用 Floyd-Warshall 来做。 你可以这么想， 如果从 i 到 j 的距离大于 0，那不就是先修课么。而这道题数据范围 queries 大概是 10 ^ 4 ， 用上面的 dijkstra 算法肯定超时，，因此 Floyd-Warshall 算法是明智的选择。</p><p>我这里直接套模板，稍微改下就过了。完整代码： Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> Floyd<span class="token operator">-</span>Warshall<span class="token punctuation">(</span>self<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">and</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> dist

    <span class="token keyword">def</span> <span class="token function">checkIfPrerequisite</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> to<span class="token punctuation">,</span> fr <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>
            graph<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        dist <span class="token operator">=</span> self<span class="token punctuation">.</span>Floyd<span class="token operator">-</span>Warshall<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
        <span class="token keyword">for</span> to<span class="token punctuation">,</span> fr <span class="token keyword">in</span> queries<span class="token punctuation">:</span>
            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//咳咳这个写法不是本题最优
var checkIfPrerequisite = function(numCourses, prerequisites, queries) {
    const graph = {}
    for(const [course, pre] of prerequisites){
        if(!graph[pre]) graph[pre] = {}
        graph[pre][course] = true
    }

    const ans = []

    const dist = Floyd-Warshall(graph, numCourses)
    for(const [course, pre] of queries){
        ans.push(dist[pre][course])
    }

    return ans
};

var Floyd-Warshall = function(graph, n){
    dist = Array.from({length: n + 1}).map(() =&gt; Array.from({length: n + 1}).fill(false))
    for(let k = 0; k &lt; n; k++){
        for(let i = 0; i &lt; n; i++){
            for(let j = 0; j &lt; n; j++){
                if(graph[i] &amp;&amp; graph[i][j]) dist[i][j] = true
                if(graph[i] &amp;&amp; graph[k]){
                    dist[i][j] = (dist[i][j])|| (dist[i][k] &amp;&amp; dist[k][j])
                }else if(graph[i]){
                    dist[i][j] = dist[i][j]
                }
            }
        }
    }
    return dist
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),k={href:"https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/",title:"1617. 统计子树中城市之间最大距离",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"图上的动态规划算法大家还可以拿这个题目来练习一下。",-1),m={href:"https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/",title:"787. K 站中转内最便宜的航班",target:"_blank",rel:"noopener noreferrer"},b=p(`<h4 id="贝尔曼-福特算法" tabindex="-1"><a class="header-anchor" href="#贝尔曼-福特算法" aria-hidden="true">#</a> 贝尔曼-福特算法</h4><p>和上面的算法类似。这种解法主要解决单源最短路径，即图中某一点到其他点的最短距离。</p><p>其基本思想也是动态规划。</p><p>核心算法为：</p><ul><li>初始化起点距离为 0</li><li>对图中的所有边进行<strong>若干次</strong>处理，直到稳定。处理的依据是：对于每一个有向边 (u,v)，如果 dist[u] + w 小于 dist[v]，那么意味着我们<strong>找到了一条到达 v 更近的路</strong>，更新之。</li><li>上面的若干次的上限是顶点 V 的个数，因此不妨直接进行 n 次处理。</li><li>最后检查一下是否存在负边引起的环。（注意）</li></ul><p>举个例子。对于如下的一个图，存在一个 B -&gt; C -&gt; D -&gt; B，这样 B 到 C 和 D 的距离理论上可以无限小。我们需要检测到这一种情况，并退出。</p><p><img src="https://p.ipic.vip/4909ju.jpg" alt=""></p><p>此算法时间复杂度：$O(V*E)$， 空间复杂度：$O(V)$。</p><p>代码示例：<br> Python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># return -1 for not exsit</span>
<span class="token comment"># else return dis map where dis[v] means for point s the least cost to point v</span>
<span class="token keyword">def</span> <span class="token function">bell_man</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dis <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> math<span class="token punctuation">.</span>inf<span class="token punctuation">)</span>
    dis<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            <span class="token keyword">if</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w

    <span class="token keyword">for</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
        <span class="token keyword">if</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>

    <span class="token keyword">return</span> dis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>const BellmanFord = (edges, startPoint)=&gt;{
  const n = edges.length;
  const dist = new Array(n).fill(Number.MAX_SAFE_INTEGER);
  dist[startPoint] = 0;

  for(let i = 0; i &lt; n; i++){
    for(const [u, v, w] of edges){
        if(dist[u] + w &lt; dist[v]){
            dist[v] = dist[u] + w;
        }
    }
  }

  for(const [u, v, w] of edges){
    if(dist[u] + w &lt; dist[v]) return -1;
  }

  return dist
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐阅读：</p>`,13),h={href:"https://www.programiz.com/dsa/bellman-ford-algorithm",title:"bellman-ford-algorithm",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"题目推荐：",-1),f={href:"https://binarysearch.com/problems/Best-Currency-Path",title:"Best Currency Path",target:"_blank",rel:"noopener noreferrer"},y=p(`<h3 id="拓扑排序" tabindex="-1"><a class="header-anchor" href="#拓扑排序" aria-hidden="true">#</a> 拓扑排序</h3><p>在计算机科学领域，有向图的拓扑排序是对其顶点的一种线性排序，使得对于从顶点 u 到顶点 v 的每个有向边 uv， u 在排序中都在之前。当且仅当图中没有定向环时（即有向无环图），才有可能进行拓扑排序。</p><p>典型的题目就是给你一堆课程，课程之间有先修关系，让你给出一种可行的学习路径方式，要求先修的课程要先学。任何有向无环图至少有一个拓扑排序。已知有算法可以在线性时间内，构建任何有向无环图的拓扑排序。</p><h4 id="kahn-算法" tabindex="-1"><a class="header-anchor" href="#kahn-算法" aria-hidden="true">#</a> Kahn 算法</h4><p>简单来说，假设 L 是存放结果的列表，先找到那些入度为零的节点，把这些节点放到 L 中，因为这些节点没有任何的父节点。**然后把与这些节点相连的边从图中去掉，再寻找图中的入度为零的节点。**对于新找到的这些入度为零的节点来说，他们的父节点已经都在 L 中了，所以也可以放入 L。重复上述操作，直到找不到入度为零的节点。如果此时 L 中的元素个数和节点总数相同，说明排序完成；如果 L 中的元素个数和节点总数不同，说明原图中存在环，无法进行拓扑排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">topologicalSort</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Kahn&#39;s Algorithm is used to find Topological ordering of Directed Acyclic Graph
    using BFS
    &quot;&quot;&quot;</span>
    indegree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>
    queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    topo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> key<span class="token punctuation">,</span> values <span class="token keyword">in</span> graph<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> values<span class="token punctuation">:</span>
            indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>indegree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
        vertex <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cnt <span class="token operator">+=</span> <span class="token number">1</span>
        topo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>vertex<span class="token punctuation">)</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> graph<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">:</span>
            indegree<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

    <span class="token keyword">if</span> cnt <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Cycle exists&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>topo<span class="token punctuation">)</span>


<span class="token comment"># Adjacency List of Graph</span>
graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
topologicalSort<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最小生成树" tabindex="-1"><a class="header-anchor" href="#最小生成树" aria-hidden="true">#</a> 最小生成树</h3><p>首先我们来看下什么是生成树。</p><p>首先生成树是原图的一个子图，它本质是一棵树，这也是为什么叫做生成树，而不是生成图的原因。其次生成树应该包括图中所有的顶点。 如下图由于没有包含所有顶点，换句话说所有顶点没有在同一个联通域，因此不是一个生成树。</p><p><img src="https://p.ipic.vip/9qlhgv.jpg" alt=""></p><blockquote><p>黄色顶点没有包括在内</p></blockquote><p>你可以将生成树看成是根节点不确定的多叉树，由于是一棵树，那么一定不包含环。如下图就不是生成树。</p><p><img src="https://p.ipic.vip/js111h.jpg" alt=""></p><p>因此不难得出，最小生成树的边的个数是 n - 1，其中 n 为顶点个数。</p><p>接下来我们看下什么是最小生成树。</p><p>最小生成树是在生成树的基础上加了<strong>最小</strong>关键字，是最小权重生成树的简称。从这句话也可以看出，最小生成树处理正是有权图。生成树的权重是其所有边的权重和，那么<strong>最小生成树就是权重和最小的生成树</strong>，由此可看出，不管是生成树还是最小生成树都可能不唯一。</p><p>最小生成树在实际生活中有很强的价值。比如我要修建一个地铁，并覆盖 n 个站，这 n 个站要互相都可以到达（同一个联通域），如果建造才能使得花费最小？由于每个站之间的路线不同，因此造价也不一样，因此这就是一个最小生成树的实际使用场景，类似的例子还有很多。</p><p><img src="https://p.ipic.vip/bedy0j.jpg" alt=""></p><p>（图来自维基百科）</p><p>不难看出，计算最小生成树就是从边集合中挑选 n - 1 个边，使得其满足生成树，并且权值和最小。</p><p>Kruskal 和 Prim 是两个经典的求最小生成树的算法，这两个算法又是如何计算最小生成树的呢？本节我们就来了解一下它们。</p><h4 id="kruskal" tabindex="-1"><a class="header-anchor" href="#kruskal" aria-hidden="true">#</a> Kruskal</h4><p>Kruskal 相对比较容易理解，推荐掌握。</p><p>Kruskal 算法也被形象地称为<strong>加边法</strong>，每前进一次都选择权重最小的边，加入到结果集。为了防止环的产生（增加环是无意义的，只要权重是正数，一定会使结果更差），我们需要检查下当前选择的边是否和已经选择的边联通了。如果联通了，是没有必要选取的，因为这会使得环产生。因此算法上，我们可使用并查集辅助完成。关于并查集，我们会在之后的进阶篇进行讲解。</p><blockquote><p>下面代码中的 find_parent 部分，实际上就是并查集的核心代码，只是我们没有将其封装并使用罢了。</p></blockquote><p>Kruskal 具体算法：</p><ol><li>对边按照权值从小到大进行排序。</li><li>将 n 个顶点初始化为 n 个联通域</li><li>按照权值从小到大选择边加入到结果集，每次<strong>贪心地</strong>选择最小边。如果当前选择的边是否和已经选择的边联通了（如果强行加就有环了），则放弃选择，否则进行选择，加入到结果集。</li><li>重复 3 直到我们找到了一个联通域大小为 n 的子图</li></ol><p>代码模板：</p><p>其中 edge 是一个数组，数组每一项都形如： (cost, fr, to)，含义是 从 fr 到 to 有一条权值为 cost 的边。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DisjointSetUnion</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n
        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>
            <span class="token keyword">return</span> x
        self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">unionSet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        fx<span class="token punctuation">,</span> fy <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        <span class="token keyword">if</span> fx <span class="token operator">==</span> fy<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>fx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">:</span>
            fx<span class="token punctuation">,</span> fy <span class="token operator">=</span> fy<span class="token punctuation">,</span> fx

        self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>fx<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>fy<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>f<span class="token punctuation">[</span>fy<span class="token punctuation">]</span> <span class="token operator">=</span> fx
        <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> edges<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>
        dsu <span class="token operator">=</span> DisjointSetUnion<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

        edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

        ret<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
        <span class="token keyword">for</span> length<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
            <span class="token keyword">if</span> dsu<span class="token punctuation">.</span>unionSet<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
                ret <span class="token operator">+=</span> length
                num <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> num <span class="token operator">==</span> n<span class="token punctuation">:</span>
                    <span class="token keyword">break</span>

        <span class="token keyword">return</span> ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prim" tabindex="-1"><a class="header-anchor" href="#prim" aria-hidden="true">#</a> Prim</h4><p>Prim 算法也被形象地称为<strong>加点法</strong>，每前进一次都选择权重最小的点，加入到结果集。形象地看就像一个不断生长的真实世界的树。</p><p>Prim 具体算法：</p><ol><li>初始化最小生成树点集 MV 为图中任意一个顶点，最小生成树边集 ME 为空。我们的目标是将 MV 填充到 和 V 一样，而边集则根据 MV 的产生自动计算。</li><li>在集合 E 中 （集合 E 为原始图的边集）选取最小的边 &lt;u, v&gt; 其中 u 为 MV 中已有的元素，而 v 为 MV 中不存在的元素（像不像上面说的<strong>不断生长的真实世界的树</strong>），将 v 加入到 MV，将 &lt;u, v&gt; 加到 ME。</li><li>重复 2 直到我们找到了一个联通域大小为 n 的子图</li></ol><p>代码模板：</p><p>其中 dist 是二维数组，dist[i][j] = x 表示顶点 i 到顶点 j 有一条权值为 x 的边。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">Prim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dist<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span>
        d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token comment"># 表示各个顶点与加入最小生成树的顶点之间的最小距离.</span>
        vis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token comment"># 表示是否已经加入到了最小生成树里面</span>
        d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        ans <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 寻找目前这轮的最小d</span>
            M <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> M<span class="token punctuation">:</span>
                    node <span class="token operator">=</span> i
                    M <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            vis<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            ans <span class="token operator">+=</span> M
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两种算法比较" tabindex="-1"><a class="header-anchor" href="#两种算法比较" aria-hidden="true">#</a> 两种算法比较</h4><p>为了后面描述方便，我们令 V 为图中的顶点数， E 为图中的边数。那么 KruKal 的算法复杂度是 $O(ElogE)$，Prim 的算法时间复杂度为 $E + VlogV$。因此 Prim 适合适用于稠密图，而 KruKal 则适合稀疏图。</p>`,39),w={href:"https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91",title:"维基百科 - 最小生成树",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"另外这里有一份视频学习资料，其中的动画做的不错，大家可以作为参考，地址：https://www.bilibili.com/video/BV1Eb41177d1/",-1),q={href:"https://leetcode-cn.com/problems/min-cost-to-connect-all-points/",title:"1584. 连接所有点的最小费用",target:"_blank",rel:"noopener noreferrer"},j=p(`<h3 id="其他算法" tabindex="-1"><a class="header-anchor" href="#其他算法" aria-hidden="true">#</a> 其他算法</h3><h4 id="a-星寻路算法" tabindex="-1"><a class="header-anchor" href="#a-星寻路算法" aria-hidden="true">#</a> A 星寻路算法</h4><p>A 星寻路解决的问题是在一个二维的表格中找出任意两点的最短距离或者最短路径。常用于游戏中的 NPC 的移动计算，是一种常用启发式算法。一般这种题目都会有障碍物。除了障碍物，力扣的题目还会增加一些限制，使得题目难度增加。</p><p>这种题目一般都是力扣的困难难度。理解起来不难， 但是要完整地没有 bug 地写出来却不那么容易。</p><p>在该算法中，我们从起点开始，检查其相邻的四个方格并尝试扩展，直至找到目标。A 星寻路算法的寻路方式不止一种，感兴趣的可以自行了解一下。</p><p>公式表示为： f(n)=g(n)+h(n)。</p><p>其中：</p><ul><li><p>f(n) 是从初始状态经由状态 n 到目标状态的估计代价，</p></li><li><p>g(n) 是在状态空间中从初始状态到状态 n 的实际代价，</p></li><li><p>h(n) 是从状态 n 到目标状态的最佳路径的估计代价。</p></li></ul><p>如果 g(n)为 0，即只计算任意顶点 n 到目标的评估函数 h(n)，而不计算起点到顶点 n 的距离，则算法转化为使用贪心策略的最良优先搜索，速度最快，但可能得不出最优解； 如果 h(n)不大于顶点 n 到目标顶点的实际距离，则一定可以求出最优解，而且 h(n)越小，需要计算的节点越多，算法效率越低，常见的评估函数有——欧几里得距离、曼哈顿距离、切比雪夫距离； 如果 h(n)为 0，即只需求出起点到任意顶点 n 的最短路径 g(n)，而不计算任何评估函数 h(n)，则转化为单源最短路径问题，即 Dijkstra 算法，此时需要计算最多的顶点；</p><p>这里有一个重要的概念是<strong>估价算法</strong>，一般我们使用 <strong>曼哈顿距离</strong>来进行估价，即 <code>H(n) = D * (abs ( n.x – goal.x ) + abs ( n.y – goal.y ) )</code>。</p><p><img src="https://p.ipic.vip/wlg8gk.gif" alt=""></p><p>（图来自维基百科 https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95 ）</p><p>一个完整的代码模板：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grid <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 0 are free path whereas 1&#39;s are obstacles</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
heuristic = [[9, 8, 7, 6, 5, 4],
             [8, 7, 6, 5, 4, 3],
             [7, 6, 5, 4, 3, 2],
             [6, 5, 4, 3, 2, 1],
             [5, 4, 3, 2, 1, 0]]&quot;&quot;&quot;</span>

init <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
goal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># all coordinates are given in format [y,x]</span>
cost <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment"># the cost map which pushes the path closer to the goal</span>
heuristic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heuristic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> goal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>j <span class="token operator">-</span> goal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            heuristic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>  <span class="token comment"># added extra penalty in the heuristic map</span>


<span class="token comment"># the actions we can take</span>
delta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># go up  # go left  # go down  # go right</span>


<span class="token comment"># function to search the path</span>
<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> init<span class="token punctuation">,</span> goal<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> heuristic<span class="token punctuation">)</span><span class="token punctuation">:</span>

    closed <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>  <span class="token comment"># the reference grid</span>
    closed<span class="token punctuation">[</span>init<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    action <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>  <span class="token comment"># the action grid</span>

    x <span class="token operator">=</span> init<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    y <span class="token operator">=</span> init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    g <span class="token operator">=</span> <span class="token number">0</span>
    f <span class="token operator">=</span> g <span class="token operator">+</span> heuristic<span class="token punctuation">[</span>init<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>init<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    cell <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">]</span>

    found <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># flag that is set when search is complete</span>
    resign <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># flag set if we can&#39;t find expand</span>

    <span class="token keyword">while</span> <span class="token keyword">not</span> found <span class="token keyword">and</span> <span class="token keyword">not</span> resign<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;FAIL&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># to choose the least costliest action so as to move closer to the goal</span>
            cell<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cell<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token builtin">next</span> <span class="token operator">=</span> cell<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
            y <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
            g <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

            <span class="token keyword">if</span> x <span class="token operator">==</span> goal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> y <span class="token operator">==</span> goal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                found <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># to try out different valid actions</span>
                    x2 <span class="token operator">=</span> x <span class="token operator">+</span> delta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    y2 <span class="token operator">=</span> y <span class="token operator">+</span> delta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> x2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> x2 <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token keyword">and</span> y2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> y2 <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> closed<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> grid<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                            g2 <span class="token operator">=</span> g <span class="token operator">+</span> cost
                            f2 <span class="token operator">=</span> g2 <span class="token operator">+</span> heuristic<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span>
                            cell<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>f2<span class="token punctuation">,</span> g2<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">]</span><span class="token punctuation">)</span>
                            closed<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                            action<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">=</span> i
    invpath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    x <span class="token operator">=</span> goal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    y <span class="token operator">=</span> goal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    invpath<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># we get the reverse path from here</span>
    <span class="token keyword">while</span> x <span class="token operator">!=</span> init<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> y <span class="token operator">!=</span> init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        x2 <span class="token operator">=</span> x <span class="token operator">-</span> delta<span class="token punctuation">[</span>action<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        y2 <span class="token operator">=</span> y <span class="token operator">-</span> delta<span class="token punctuation">[</span>action<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        x <span class="token operator">=</span> x2
        y <span class="token operator">=</span> y2
        invpath<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>

    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>invpath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>invpath<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>invpath<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;ACTION MAP&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> path


a <span class="token operator">=</span> search<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> init<span class="token punctuation">,</span> goal<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> heuristic<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),_={href:"https://leetcode-cn.com/problems/minimum-moves-to-move-a-box-to-their-target-location/",title:"1263. 推箱子",target:"_blank",rel:"noopener noreferrer"},P=n("h4",{id:"二分图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二分图","aria-hidden":"true"},"#"),s(" 二分图")],-1),A=n("p",null,"二分图我在这两道题中讲过了，大家看一下之后把这两道题做一下就行了。其实这两道题和一道题没啥区别。",-1),S={href:"https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/medium/886.possible-bipartition",title:"0886. 可能的二分法",target:"_blank",rel:"noopener noreferrer"},C={href:"https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/medium/785.is-graph-bipartite",title:"0785. 判断二分图",target:"_blank",rel:"noopener noreferrer"},E=p('<p>推荐顺序为： 先看 886 再看 785。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>理解图的常见概念，我们就算入门了。接下来，我们就可以做题了。</p><p>一般的图题目有两种，一种是搜索题目，一种是动态规划题目。</p><p>对于搜索类题目，我们可以：</p><ul><li>第一步都是建图</li><li>第二步都是基于第一步的图进行遍历以寻找可行解</li></ul><blockquote><p>如果题目说明了是无环图，我们可以不使用 visited 数组，否则大多数都需要 visited 数组。当然也可以选择原地算法减少空间复杂度，具体的搜索技巧会在专题篇的搜索篇进行讨论。</p></blockquote><p>图的题目相对而言比较难，尤其是代码书写层面。但是就面试题目而言， 图的题目类型却不多。</p><ul><li>就搜索题目来说，很多题目都是套模板就可以解决。因此建议大家多练习模板，并自己多手敲，确保可以自己敲出来。</li><li>而对于动态规划题目，一个经典的例子就是<strong>Floyd-Warshall 算法</strong>，理解好了之后大家不妨拿 <code>787. K 站中转内最便宜的航班</code> 练习一下。当然这要求大家应该先学习动态规划，关于动态规划，我们会在后面的《动态规划》以及《背包问题》中进行深度讲解。</li></ul><p>\b 常见的图的板子题有以下几种：</p><ol><li>最短路。算法有 DJ 算法， floyd 算法 和 bellman 算法。这其中有的是单源算法，有的是多源算法，有的是贪心算法，有的是动态规划。</li><li>拓扑排序。拓扑排序可以使用 bfs ，也可以使用 dfs。相比于最短路，这种题目属于知道了就简单的类型。</li><li>最小生成树。最小生成树是这三种题型中出现频率最低的，可以最后突破。</li><li>A 星寻路和二分图题目比例非常低，大家可以根据自己的情况选择性掌握。</li></ol>',11);function F(B,D){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("强烈建议大家学习完专题篇的搜索之后再来学习下面经典算法。大家可以拿几道普通的搜索题目测试下，如果能够做出来再往下学习。推荐题目："),n("a",r,[s("最大化一张图中的路径价值"),t(a)])]),d,n("p",null,[s("如果这道题你可以解决了，我再推荐一道题给你 "),n("a",k,[s("1617. 统计子树中城市之间最大距离"),t(a)]),s("，国际版有一个题解代码挺清晰，挺好理解的，只不过没有使用状态压缩性能不是很好罢了，地址：https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/discuss/1136596/Python-Floyd-Warshall-and-check-all-subtrees")]),v,n("ul",null,[n("li",null,[n("a",m,[s("787. K 站中转内最便宜的航班"),t(a)])])]),b,n("ul",null,[n("li",null,[n("a",h,[s("bellman-ford-algorithm"),t(a)])])]),g,n("ul",null,[n("li",null,[n("a",f,[s("Best Currency Path"),t(a)])])]),y,n("p",null,[s("大家也可以参考一下 "),n("a",w,[s("维基百科 - 最小生成树"),t(a)]),s(" 的资料作为补充。")]),x,n("p",null,[s("大家可以使用 LeetCode 的 "),n("a",q,[s("1584. 连接所有点的最小费用"),t(a)]),s(" 来练习该算法。")]),j,n("p",null,[s("典型题目"),n("a",_,[s("1263. 推箱子"),t(a)])]),P,A,n("ul",null,[n("li",null,[n("a",S,[s("0886. 可能的二分法"),t(a)])]),n("li",null,[n("a",C,[s("0785. 判断二分图"),t(a)])])]),E])}const N=e(l,[["render",F],["__file","05.html.vue"]]);export{N as default};
