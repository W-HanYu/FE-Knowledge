import{_ as e,r as o,o as c,c as i,a as n,b as s,d as p,e as t}from"./app.8f1211c8.js";const l={},u=t(`<h1 id="大话搜索" tabindex="-1"><a class="header-anchor" href="#大话搜索" aria-hidden="true">#</a> 大话搜索</h1><p>搜索一般指在有限的状态空间中进行枚举，通过穷尽所有的可能来找到符合条件的解或者解的个数。根据搜索方式的不同，搜索算法可以分为 <code>DFS</code>，<code>BFS</code>，<code>A*</code>算法等。这里只介绍 <code>DFS</code> 和 <code>BFS</code>，以及发生在<code> DFS</code> 上一种技巧-回溯。</p><p>搜索问题覆盖面非常广泛，并且在算法题中也占据了很高的比例。我甚至还在公开演讲中提到了 <code>前端算法面试中搜索类占据了很大的比重，尤其是国内公司</code>。</p><p>搜索专题中的子专题有很多，而大家所熟知的 <code>BFS</code>，<code>DFS </code>只是其中特别基础的内容。除此之外，还有状态记录与维护，剪枝，联通分量，拓扑排序等等。这些内容，我会在这里一一给大家介绍。</p><p>另外即使仅仅考虑 <code>DFS</code> 和 <code>BFS</code> 两种基本算法，里面能玩的花样也非常多。比如 <code>BFS</code> 的双向搜索，比如 <code>DFS</code> 的前中后序，迭代加深等等。</p><p>关于搜索，其实在二叉树部分已经做了介绍了。而这里的搜索，其实就是进一步的泛化。数据结构不再局限于前面提到的数组，链表或者树。而扩展到了诸如二维数组，多叉树，图等。不过核心仍然是一样的，只不过数据结构发生了变化而已。</p><h2 id="搜索的核心是什么" tabindex="-1"><a class="header-anchor" href="#搜索的核心是什么" aria-hidden="true">#</a> 搜索的核心是什么？</h2><p>实际上搜索题目<code>本质就是将题目中的状态映射为图中的点，将状态间的联系映射为图中的边。根据题目信息构建状态空间，然后对状态空间进行遍历，遍历过程需要记录和维护状态，并通过剪枝和数据结构等提高搜索效率。</code></p><p>状态空间的数据结构不同会导致算法不同。比如对数组进行搜索，和对树，图进行搜索就不太一样。</p><p>再次强调一下，我这里讲的数组，树和图是<code>状态空间</code>的逻辑结构，而不是题目给的数据结构。比如题目给了一个数组，让你求数组的搜索子集。虽然题目给的线性的数据结构数组，然而实际上我们是对树这种非线性数据结构进行搜索。这是因为这道题对应的<code>状态空间是非线性的</code>。</p><p>对于搜索问题，我们核心关注的信息有哪些？又该如何计算呢？这也是搜索篇核心关注的。而市面上很多资料讲述的不是很详细。搜索的核心需要关注的指标有很多，比如树的深度，图的 DFS 序，图中两点间的距离等等。<code>这些指标都是完成高级算法必不可少的，而这些指标可以通过一些经典算法来实现</code>。这也是为什么我一直强调<code>一定要先学习好基础的数据结构与算法</code>的原因。</p><p>不过要讲这些讲述完整并非容易，以至于如果完整写完可能需要花很多的时间，因此一直没有动手去写。</p><p>另外由于其他数据结构都可以看做是图的特例。因此研究透图的基本思想，就很容易将其扩展到其他数据结构上，比如树。因此我打算围绕图进行讲解，并逐步具象化到其他特殊的数据结构，比如树。</p><h2 id="状态空间" tabindex="-1"><a class="header-anchor" href="#状态空间" aria-hidden="true">#</a> 状态空间</h2><p>结论先行：<code>状态空间其实就是一个图结构，图中的节点表示状态，图中的边表示状态之前的联系，这种联系就是题目给出的各种关系</code>。</p><p>搜索题目的状态空间通常是非线性的。比如上面提到的例子：求一个数组的子集。这里的状态空间实际上就是数组的各种组合。</p><p>对于这道题来说，其状态空间的一种可行的划分方式为：</p><ul><li>长度为 1 的子集</li><li>长度为 2 的子集</li><li>。。。</li><li>长度为 n 的子集（其中 n 为数组长度）</li></ul><p>而如何确定上面所有的子集呢。</p><p>一种可行的方案是可以采取类似分治的方式逐一确定。</p><p>比如我们可以：</p><ul><li>先确定某一种子集的第一个数是什么</li><li>再确定第二个数是什么</li><li>。。。</li></ul><p>如何确定第一个数，第二个数。。。呢？</p><p><code>暴力枚举所有可能就可以了。</code></p><blockquote><p>这就是搜索问题的核心，其他都是辅助，所以这句话请务必记住。</p></blockquote><p>所谓的暴力枚举所有可能在这里就是尝试数组中所有可能的数字。</p><ul><li>比如第一个数是什么？很明显可能是数组中任意一项。ok，我们就枚举 n 种情况。</li><li>第二个数呢？很明显可以是除了上面已经被选择的数之外的任意一个数。ok，我们就枚举 n - 1 种情况。</li></ul><p>据此，你可以画出如下的决策树。</p><p>（下图描述的是对一个长度为 3 的数组进行决策的部分过程，树节点中的数字表示索引。即确定第一个数有三个选择，确定第二个数会根据上次的选择变为剩下的两个选择）</p><p><img src="https://p.ipic.vip/us3d79.jpg" alt=""></p><p>决策过程动图演示：</p><p><img src="https://p.ipic.vip/1ftp32.jpg" alt="搜索-决策树.svg"></p><p><code>一些搜索算法就是基于这个朴素的思想，本质就是模拟这个决策树</code>。这里面其实也有很多有趣的细节，后面我们会对其进行更加详细的讲解。而现在大家只需要对<code>解空间是什么以及如何对解空间进行遍历有一点概念就行了。</code> 后面我会继续对这个概念进行加深。</p><p>这里大家只要记住<code>状态空间就是图，构建状态空间就是构建图。如何构建呢？当然是根据题目描述了</code> 。</p><h2 id="dfs-和-bfs" tabindex="-1"><a class="header-anchor" href="#dfs-和-bfs" aria-hidden="true">#</a> DFS 和 BFS</h2><p>DFS 和 BFS 是搜索的核心，贯穿搜索篇的始终，因此有必要先对其进行讲解。</p><h3 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h3><p>DFS 的概念来自于图论，但是搜索中 DFS 和图论中 DFS 还是有一些区别，搜索中 DFS 一般指的是通过递归函数实现暴力枚举。</p><blockquote><p>如果不使用递归，也可以使用栈来实现。不过本质上是类似的。</p></blockquote><p>首先将题目的<code>状态空间映射到一张图，状态就是图中的节点，状态之间的联系就是图中的边</code>，那么 DFS 就是在这种图上进行<code>深度优先</code>的遍历。而 BFS 也是类似，只不过遍历的策略变为了<code>广度优先</code>，一层层铺开而已。所以<code>BFS 和 DFS 只是遍历这个状态图的两种方式罢了，如何构建状态图才是关键</code>。</p><p>本质上，对上面的图进行遍历的话会生成一颗<code>搜索树</code>。为了<code>避免重复访问，我们需要记录已经访问过的节点</code>。这些是<code>所有的搜索算法共有的</code>，后面不再赘述。</p><p>如果你是在树上进行遍历，是不会有环的，也自然不需要为了<code>避免环的产生记录已经访问的节点</code>，这是因为树本质上是一个简单无环图。</p><h4 id="算法流程" tabindex="-1"><a class="header-anchor" href="#算法流程" aria-hidden="true">#</a> 算法流程</h4><ol><li>首先将根节点放入<code>stack</code>中。</li><li>从<em>stack</em>中取出第一个节点，并检验它是否为目标。如果找到目标，则结束搜寻并回传结果。否则将它某一个尚未检验过的直接子节点加入<code>stack</code>中。</li><li>重复步骤 2。</li><li>如果不存在未检测过的直接子节点。将上一级节点加入<code>stack</code>中。 重复步骤 2。</li><li>重复步骤 4。</li><li>若<code>stack</code>为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li></ol><blockquote><p>这里的 stack 可以理解为自实现的栈，也可以理解为调用栈</p></blockquote><h4 id="算法模板" tabindex="-1"><a class="header-anchor" href="#算法模板" aria-hidden="true">#</a> 算法模板</h4><p>下面我们借助递归来完成 DFS。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>满足特定条件）<span class="token punctuation">{</span>
		<span class="token comment">// 返回结果 or 退出搜索空间</span>
	<span class="token punctuation">}</span>

	visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 将当前状态标为已搜索</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>根据i能到达的下个状态j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果状态j没有被搜索过</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用技巧" tabindex="-1"><a class="header-anchor" href="#常用技巧" aria-hidden="true">#</a> 常用技巧</h4><h5 id="前序遍历与后序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历与后序遍历" aria-hidden="true">#</a> 前序遍历与后序遍历</h5><p>DFS 常见的形式有<code>前序和后序</code>。二者的使用场景也是截然不同的。</p><p>上面讲述了搜索本质就是在状态空间进行遍历，空间中的状态可以抽象为图中的点。那么如果搜索过程中，当前点的结果需要依赖其他节点（大多数情况都会有依赖），那么遍历顺序就变得重要。</p><p>比如当前节点需要依赖其子节点的计算信息，那么使用后序遍历自底向上递推就显得必要了。而如果当前节点需要依赖其父节点的信息，那么使用先序遍历进行自顶向下的递归就不难想到。</p><p>比如下文要讲的计算树的深度。由于树的深度的递归公式为： $f(x) = f(y) + 1$。其中 f(x) 表示节点 x 的深度，并且 x 是 y 的子节点。很明显这个递推公式的 base case 就是根节点深度为一，通过这个 base case 我们可以递推求出树中任意节点的深度。显然，使用先序遍历自顶向下的方式统计是简单而又直接的。</p><p>再比如下文要讲的计算树的子节点个数。由于树的子节点递归公式为： $f(x) = sum_{i=0}^{n}{f(a_i)}$ 其中 x 为树中的某一个节点，$a_i$ 为树中节点的子节点。而 base case 则是没有任何子节点(也就是叶子节点)，此时 $f(x) = 1$。 因此我们可以利用后序遍历自底向上来完成子节点个数的统计。</p>`,55),d={href:"https://leetcode-solution.cn/solutionDetail?url=https%3A%2F%2Fapi.github.com%2Frepos%2Fazl397985856%2Fleetcode%2Fcontents%2Fthinkings%2Ftree.md&type=1",target:"_blank",rel:"noopener noreferrer"},r=t(`<h5 id="迭代加深" tabindex="-1"><a class="header-anchor" href="#迭代加深" aria-hidden="true">#</a> 迭代加深</h5><p>迭代加深本质上是一种可行性的剪枝。关于剪枝，我会在后面的《回溯与剪枝》部分做更多的介绍。</p><p>所谓迭代加深指的是<code>在递归树比较深的时候，通过设定递归深度阈值，超过阈值就退出的方式主动减少递归深度的优化手段。</code>这种算法成立的前提是<code>题目中告诉我们答案不超过 xxx</code>，这样我们可以将 xxx 作为递归深度阈值，这样不仅不会错过正确解，还能在极端情况下有效减少不必须的运算。</p><p>具体地，我们可以使用自顶向下的方式记录递归树的层次，和上面介绍如何计算树深度的方法是一样的。接下来在主逻辑前增加<code>当前层次是否超过阈值</code>的判断即可。</p><p>主代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MAX_LEVEL <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> level <span class="token operator">&gt;</span> MAX_LEVEL<span class="token punctuation">:</span> <span class="token keyword">return</span>
    <span class="token comment"># 主逻辑</span>
dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种技巧在实际使用中并不常见，不过在某些时候能发挥意想不到的作用。</p><h5 id="双向搜索" tabindex="-1"><a class="header-anchor" href="#双向搜索" aria-hidden="true">#</a> 双向搜索</h5><p>有时候问题规模很大，直接搜索会超时。此时可以考虑从起点搜索到问题规模的一半。然后将此过程中产生的状态存起来。接下来目标转化为在存储的中间状态中寻找满足条件的状态。进而达到降低时间复杂度的效果。</p><p>上面的说法可能不太容易理解。 接下来通过一个例子帮助大家理解。</p><h6 id="题目地址" tabindex="-1"><a class="header-anchor" href="#题目地址" aria-hidden="true">#</a> 题目地址</h6><p>https://leetcode-cn.com/problems/closest-subsequence-sum/</p><h6 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>给你一个整数数组 nums 和一个目标值 goal 。

你需要从 nums 中选出一个子序列，使子序列元素总和最接近 goal 。也就是说，如果子序列元素和为 sum ，你需要 最小化绝对差 abs(sum - goal) 。

返回 abs(sum - goal) 可能的 最小值 。

注意，数组的子序列是通过移除原始数组中的某些元素（可能全部或无）而形成的数组。

 

示例 1：

输入：nums = [5,-7,3,5], goal = 6
输出：0
解释：选择整个数组作为选出的子序列，元素和为 6 。
子序列和与目标值相等，所以绝对差为 0 。
示例 2：

输入：nums = [7,-9,15,-2], goal = -5
输出：1
解释：选出子序列 [7,-9,-2] ，元素和为 -4 。
绝对差为 abs(-4 - (-5)) = abs(1) = 1 ，是可能的最小值。
示例 3：

输入：nums = [1,2,3], goal = -7
输出：7
 

提示：

1 &lt;= nums.length &lt;= 40
-10^7 &lt;= nums[i] &lt;= 10^7
-10^9 &lt;= goal &lt;= 10^9


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h6><p>从数据范围可以看出，这道题大概率是一个 $O(2^m)$ 时间复杂度的解法，其中 m 是 nums.length 的一半。</p><p>为什么？首先如果题目数组长度限制为小于等于 20，那么大概率是一个 $O(2^n)$ 的解法。</p><blockquote><p>如果这个也不知道，建议看一下这篇文章 https://lucifer.ren/blog/2020/12/21/shuati-silu3/ 另外我的刷题插件 leetcode-cheatsheet 也给出了时间复杂度速查表供大家参考。</p></blockquote><p>将 40 砍半恰好就可以 AC 了。实际上，40 这个数字就是一个强有力的信号。</p><p>回到题目中。我们可以用一个二进制位表示原数组 nums 的一个子集，这样用一个长度为 $2^n$ 的数组就可以描述 nums 的所有子集了，这就是状态压缩。一般题目数据范围是 &lt;= 20 都应该想到。</p><blockquote><p>这里 40 折半就是 20 了。</p></blockquote>`,21),k={href:"https://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&mid=2247486874&idx=1&sn=0f27ddd51ad5b92ef0ddcc4fb19a3f5e&chksm=eb88c183dcff4895209c4dc4d005e3bb143cc852805594b407dbf3f4718c60261f09c2849f70&token=1227596150&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>接下来，我们使用动态规划求出所有的子集和。</p><p>令 dp[i] 表示选择情况如 i 所示的和。什么是<code>选择情况如 i 所示呢？</code></p><p>比如我要求 nums 的子集和。那么 nums 的子集有 $2^n$ 个，即 nums 中每一个数都有<code>选择和不选择两者情况</code>。因此一共就有$2^n$种。如果用一个数字的二进制来表示这种选择情况，其中 0 表示选择 1 表示不选择，那么一个位数足够的数（二进制位数需要大于 n）可以用来表示<code>一种</code>可能的选择情况。</p><p>我们可以枚举数组的每一项，对于每一项我们都考虑将其加入到选择中。那么转移方程为 ： <code>dp[(1 &lt;&lt; i) + j] = dp[j] + A[i]</code>，其中 j 为 i 的子集， i 和 j 的二进制表示的是 nums 的选择情况。</p><p>动态规划求子集和代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">combine_sum</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment"># 加 i 加入选择</span>
    <span class="token keyword">return</span> dp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将 nums 平分为两部分，分别计算子集和：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
c1 <span class="token operator">=</span> combine_sum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
c2 <span class="token operator">=</span> combine_sum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 c1 就是前半部分数组的子集和，c2 就是后半部分的子集和。</p><p>接下来问题转化为：<code>在两个数组 c1 和 c2中找两个数，其和最接近 goal</code>。而这是一个非常经典的双指针问题，逻辑类似两数和。</p><p>只不过两数和是一个数组挑两个数，这里是两个数组分别挑一个数罢了。</p><p>这里其实只需要一个指针指向一个数组的头，另外一个指向另外一个数组的尾即可。</p><p>代码不难写出：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">combine_closest</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 先排序以便使用双指针</span>
    c1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    c2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ans <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        _sum <span class="token operator">=</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> c2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>_sum <span class="token operator">-</span> goal<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> _sum <span class="token operator">&gt;</span> goal<span class="token punctuation">:</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> _sum <span class="token operator">&lt;</span> goal<span class="token punctuation">:</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个代码不懂的多看看两数和。</p><h6 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h6><p>代码支持：Python3</p><p>Python3 Code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minAbsDifference</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> goal<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">combine_sum</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
            n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
            dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">return</span> dp

        <span class="token keyword">def</span> <span class="token function">combine_closest</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            c1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
            c2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
            ans <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
            i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                _sum <span class="token operator">=</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> c2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>_sum <span class="token operator">-</span> goal<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> _sum <span class="token operator">&gt;</span> goal<span class="token punctuation">:</span>
                    j <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">elif</span> _sum <span class="token operator">&lt;</span> goal<span class="token punctuation">:</span>
                    i <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token number">0</span>
            <span class="token keyword">return</span> ans

        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">return</span> combine_closest<span class="token punctuation">(</span>combine_sum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> combine_sum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>复杂度分析</code></p><p>令 n 为数组长度, m 为 $\\frac{n}{2}$。</p><ul><li>时间复杂度：$O(m*2^m)$</li><li>空间复杂度：$O(2^m)$</li></ul><p>相关题目推荐：</p>`,23),b={href:"https://leetcode-cn.com/problems/3sum-closest/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode-cn.com/problems/last-stone-weight-ii/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://leetcode-cn.com/problems/closest-dessert-cost/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>这道题和双向搜索有什么关系呢？</p><p>回一下开头我的话：<code>有时候问题规模很大，直接搜索会超时。此时可以考虑从起点搜索到问题规模的一半。然后将此过程中产生的状态存起来。接下来目标转化为在存储的中间状态中寻找满足条件的状态。进而达到降低时间复杂度的效果。</code></p><p>对应这道题，我们如果直接暴力搜索。那就是枚举所有子集和，然后找到和 goal 最接近的，思路简单直接。可是这样会超时，那么就搜索到一半， 然后将状态存起来（对应这道题就是存到了 dp 数组）。接下来问题转化为两个 dp 数组的运算。<code>该算法，本质上是将位于指数位的常数项挪动到了系数位</code>。这是一种常见的双向搜索，我姑且称为 DFS 的双向搜索。目的是为了和后面的 BFS 双向搜索进行区分。</p><h3 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h3><p>BFS 也是图论中算法的一种。不同于 DFS， BFS 采用横向搜索的方式，从初始状态一层层展开直到目标状态，在数据结构上通常采用队列结构。</p><p>具体地，我们不断从队头取出状态，然后<code>将此状态对应的决策产生的所有新的状态推入队尾</code>，重复以上过程直至队列为空即可。</p><p>注意这里有两个关键点：</p><ol><li>将此状态对应的决策。 实际上这句话指的就是状态空间中的图的边，而不管是 DFS 和 BFS 边都是确定的。也就是说不管是 DFS 还是 BFS 这个决策都是一样的。不同的是什么？不同的是进行决策的方向不同。</li><li>所有新的状态推入队尾。上面说 BFS 和 DFS 是进行决策的方向不同。这就可以通过这个动作体现出来。由于直接将所有<code>状态空间中的当前点的邻边</code>放到队尾。由队列的先进先出的特性，当前点的邻边访问完成之前是不会继续向外扩展的。这一点大家可以和 DFS 进行对比。</li></ol><p>最简单的 BFS 每次扩展新的状态就增加一步，通过这样一步步逼近答案。其实也就等价于在一个权值为 1 的图上进行 BFS。由于队列的<code>单调性和二值性</code>，当第一次取出目标状态时就是最少的步数。基于这个特性，BFS 适合求解一些<code>最少操作</code>的题目。</p><blockquote><p>关于单调性和二值性，我会在后面的 BFS 和 DFS 的对比那块进行讲解。</p></blockquote><p>前面 DFS 部分提到了<code>不管是什么搜索都需要记录和维护状态，其中一个就是节点访问状态以防止环的产生</code>。而 BFS 中我们常常用来求点的最短距离。值得注意的是，有时候我们会使用一个哈希表 dist 来记录从源点到图中其他点的距离。这个 dist 也可以充当<code>防止环产生的功能</code>，这是因为第一次到达一个点后<code>再次到达此点的距离一定比第一次到达大</code>，利用这点就可知道是否是第一次访问了。</p><h4 id="算法流程-1" tabindex="-1"><a class="header-anchor" href="#算法流程-1" aria-hidden="true">#</a> 算法流程</h4><ol><li>首先将根节点放入队列中。</li><li>从队列中取出第一个节点，并检验它是否为目标。 <ul><li>如果找到目标，则结束搜索并回传结果。</li><li>否则将它所有尚未检验过的直接子节点加入队列中。</li></ul></li><li>若队列为空，表示整张图都检查过了——亦即图中没有欲搜索的目标。结束搜索并回传“找不到目标”。</li><li>重复步骤 2。</li></ol><h4 id="算法模板-1" tabindex="-1"><a class="header-anchor" href="#算法模板-1" aria-hidden="true">#</a> 算法模板</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>初始状态<span class="token punctuation">)</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> i <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i的可抵达状态j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>j 合法<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 找到所有合法解</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用技巧-1" tabindex="-1"><a class="header-anchor" href="#常用技巧-1" aria-hidden="true">#</a> 常用技巧</h4><h5 id="双向搜索-1" tabindex="-1"><a class="header-anchor" href="#双向搜索-1" aria-hidden="true">#</a> 双向搜索</h5><h6 id="题目地址-126-单词接龙-ii" tabindex="-1"><a class="header-anchor" href="#题目地址-126-单词接龙-ii" aria-hidden="true">#</a> 题目地址(126. 单词接龙 II)</h6><p>https://leetcode-cn.com/problems/word-ladder-ii/</p><h6 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1" aria-hidden="true">#</a> 题目描述</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>按字典 wordList 完成从单词 beginWord 到单词 endWord 转化，一个表示此过程的 转换序列 是形式上像 beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk 这样的单词序列，并满足：

每对相邻的单词之间仅有单个字母不同。
转换过程中的每个单词 si（1 &lt;= i &lt;= k）必须是字典 wordList 中的单词。注意，beginWord 不必是字典 wordList 中的单词。
sk == endWord

给你两个单词 beginWord 和 endWord ，以及一个字典 wordList 。请你找出并返回所有从 beginWord 到 endWord 的 最短转换序列 ，如果不存在这样的转换序列，返回一个空列表。每个序列都应该以单词列表 [beginWord, s1, s2, ..., sk] 的形式返回。

 

示例 1：

输入：beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
输出：[[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]
解释：存在 2 种最短的转换序列：
&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;
&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot;


示例 2：

输入：beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]
输出：[]
解释：endWord &quot;cog&quot; 不在字典 wordList 中，所以不存在符合要求的转换序列。


 

提示：

1 &lt;= beginWord.length &lt;= 7
endWord.length == beginWord.length
1 &lt;= wordList.length &lt;= 5000
wordList[i].length == beginWord.length
beginWord、endWord 和 wordList[i] 由小写英文字母组成
beginWord != endWord
wordList 中的所有单词 互不相同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1" aria-hidden="true">#</a> 思路</h6><p>这道题就是我们日常玩的<code>成语接龙游戏</code>。即让你从 beginWord 开始， 接龙的 endWord。让你找到<code>最短</code>的接龙方式，如果有多个，则<code>全部返回</code>。</p><p>不同于成语接龙的字首接字尾。这种接龙需要的是<code>下一个单词和上一个单词</code>仅有一个单词不同。</p><p>我们可以对问题进行抽象：<code>即构建一个大小为 n 的图，图中的每一个点表示一个单词，我们的目标是找到一条从节点 beginWord 到节点 endWord 的一条最短路径。</code></p><p>这是一个不折不扣的图上 BFS 的题目。套用上面的解题模板可以轻松解决。唯一需要注意的是<code>如何构建图</code>。更进一步说就是<code>如何构建边</code>。</p><p>由题目信息的转换规则：<code>每对相邻的单词之间仅有单个字母不同</code>。不难知道，如果两个单词的仅有单个字母不同 ，就<code>说明两者之间有一条边。</code></p><p>明白了这一点，我们就可以构建邻接矩阵了。</p><p>核心代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>neighbors <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> word <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        neighbors<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建好了图。 BFS 剩下要做的就是明确起点和终点就好了。对于这道题来说，起点是 beginWord，终点是 endWord。</p><p>那我们就可以将 beginWord 入队。不断在图上做 BFS，直到第一次遇到 endWord 就好了。</p><p>套用上面的 BFS 模板，不难写出如下代码:</p><blockquote><p>这里我用了 cost 而不是 visitd，目的是为了让大家见识多种写法。下面的优化解法会使用 visited 来记录。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findLadders</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> endWord<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> wordList<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        cost <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        cost<span class="token punctuation">[</span>beginWord<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        neighbors <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> word <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                neighbors<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
        q <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>beginWord<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">while</span> q<span class="token punctuation">:</span>
            path <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> cur <span class="token operator">==</span> endWord<span class="token punctuation">:</span>
                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> neighbors<span class="token punctuation">[</span>cur<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> cur<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> cost<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> cost<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">:</span>
                            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span>
                            cost<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当终点可以逆向搜索的时候，我们也可以尝试双向 BFS。更本质一点就是：<code>如果你构建的状态空间的边是双向的，那么就可以使用双向 BFS。</code></p><p>和 DFS 的双向搜索思想是类似的。我们只需要使用两个队列分别存储从起点和终点进行扩展的节点（我称其为起点集与终点集）即可。当起点和终点在某一时刻交汇了，说明找到了一个从起点到终点的路径，其路径长度就是两个队列扩展的路径长度和。</p><p>以上就是双向搜索的大体思路。用图来表示就是这样的：</p><p><img src="https://p.ipic.vip/epi1dl.jpg" alt=""></p><p>如上图，我们从起点和终点（A 和 Z）分别开始搜索，如果起点的扩展状态和终点的扩展状态重叠（本质上就是队列中的元素重叠了），那么我们就知道了一个从节点到终点的最短路径。</p><p>动图演示：</p><p><img src="https://p.ipic.vip/1j44k8.jpg" alt="双向搜索.svg"></p><p>看到这里有必要暂停一下插几句话。</p><hr><p>为什么双向搜索就快了？什么情况都会更快么？那为什么不都用双向搜索？有哪些使用条件？</p><p>我们一个个回答。</p><ul><li>为什么双向搜索更快了？通过上面的图我们发现通常刚开始的时候边比较少，队列中的数据也比较少。而随着搜索的进行，<code>搜索树越来越大， 队列中的节点随之增多</code>。和上面双向搜索类似，这种增长速度很多情况下是指数级别的，而双向搜索<code>可以将指数的常系数移动到多项式系数</code>。如果不使用双向搜索那么搜索树大概是这样的：</li></ul><p><img src="https://p.ipic.vip/hm471g.jpg" alt=""></p><p>可以看出搜索树大了很多，以至于很多点我都画不下，只好用 ”。。。“ 来表示。</p><ul><li>什么情况下更快？相比于单向搜索，双向搜索通常更快。当然也有例外，举个极端的例子，假如从起点到终点只有一条路径，那么无论使用单向搜索还是双向搜索结果都是一样。</li></ul><p><img src="https://p.ipic.vip/k5nm5q.jpg" alt=""></p><p>如图使用单向搜索还是双向搜索都是一样的。</p><ul><li>为什么不都用双向搜索？实际上做题中，我建议大家尽量使用单向搜索，因为写起来更简单，并且大多数都可以通过所有的测试用例。除非你预估到可能会超时或者提交后发现超时的时候再尝试使用双向搜索。</li><li>有哪些使用条件？正如前面所说：”终点可以逆向搜索的时候，可以尝试双向 BFS。更本质一点就是：<code>如果你构建的状态空间的边是双向的，那么就可以使用双向 BFS。</code>“</li></ul><hr><p>让我们继续回到这道题。为了能够判断两者是否交汇，我们可以使用两个 hashSet 分别存储起点集合终点集。当一个节点既出现起点集又出现在终点集，那就说明出现了交汇。</p><p>为了节省代码量以及空间消耗，我没有使用上面的队列，而是直接使用了哈希表来代替队列。这种做法可行的关键仍然是上面提到的<code>队列的二值性和单调性</code>。</p><p>由于<code>新一轮的出队列前</code>，队列中的权值都是相同的。因此从左到右遍历或者从右到左遍历，甚至是任意顺序遍历都是无所谓的。（很多题都无所谓）因此使用哈希表而不是队列也是可以的。这点需要引起大家的注意。希望大家对 BFS 的本质有更深的理解。</p><p>那我们是不是不需要队列，就用哈希表，哈希集合啥的存就行了？非也！我会在双端队列部分为大家揭晓。</p><p>这道题的具体算法：</p><ul><li>定义两个队列：q1 和 q2 ，分别从起点和终点进行搜索。</li><li>构建邻接矩阵</li><li>每次都尝试从 q1 和 q2 中的较小的进行扩展。这样可以达到剪枝的效果。</li></ul><p><img src="https://p.ipic.vip/zu7r4y.jpg" alt=""></p><ul><li>如果 q1 和 q2 交汇了，则将两者的路径拼接起来即可。</li></ul><h6 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h6><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findLadders</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> endWord<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> wordList<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token comment">#  剪枝 1</span>
        <span class="token keyword">if</span> endWord <span class="token keyword">not</span> <span class="token keyword">in</span> wordList<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        q1<span class="token punctuation">,</span> q2 <span class="token operator">=</span> <span class="token punctuation">{</span>beginWord<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>beginWord<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>endWord<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>endWord<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
        steps <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># 预处理，空间换时间</span>
        neighbors <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> word <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                neighbors<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
        <span class="token keyword">while</span> q1<span class="token punctuation">:</span>
            <span class="token comment"># 剪枝 2</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">:</span>
                q1<span class="token punctuation">,</span> q2 <span class="token operator">=</span> q2<span class="token punctuation">,</span> q1
            nxt <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                word<span class="token punctuation">,</span> paths <span class="token operator">=</span> q1<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
                visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> neighbors<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> neighbor <span class="token keyword">in</span> q2<span class="token punctuation">:</span>
                            <span class="token comment"># 从 beginWord 扩展过来的</span>
                            <span class="token keyword">if</span> paths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> beginWord<span class="token punctuation">:</span>
                                ans <span class="token operator">+=</span> <span class="token punctuation">[</span>path1 <span class="token operator">+</span> path2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> path1 <span class="token keyword">in</span> paths <span class="token keyword">for</span> path2 <span class="token keyword">in</span> q2<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">]</span>
                            <span class="token comment"># 从 endWord 扩展过来的</span>
                            <span class="token keyword">else</span><span class="token punctuation">:</span>
                                ans <span class="token operator">+=</span> <span class="token punctuation">[</span>path2 <span class="token operator">+</span> path1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> path1 <span class="token keyword">in</span> paths <span class="token keyword">for</span> path2 <span class="token keyword">in</span> q2<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">]</span>
                        <span class="token keyword">if</span> neighbor <span class="token keyword">in</span> wordList <span class="token keyword">and</span> neighbor <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
                            nxt<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span>path <span class="token operator">+</span> <span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">]</span>
            steps <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token comment"># 剪枝 3</span>
            <span class="token keyword">if</span> ans <span class="token keyword">and</span> steps <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            q1 <span class="token operator">=</span> nxt
        <span class="token keyword">return</span> ans

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h6><p>我想通过这道题给大家传递的知识点很多。分别是：</p><ul><li>队列不一定非得是常规的队列，也可以是哈希表等。不过某些情况必须是双端队列，这个等会讲双端队列给大家讲。</li><li>双向 BFS 是只适合双向图。也就是说从终点也往前推。</li><li>双向 BFS 从较少状态的一端进行扩展可以起到剪枝的效果</li><li>visitd 和 dist/cost 都可以起到记录点访问情况以防止环的产生的作用。不过 dist 的作用更多，相应空间占用也更大。</li></ul><h5 id="双端队列" tabindex="-1"><a class="header-anchor" href="#双端队列" aria-hidden="true">#</a> 双端队列</h5><p>上面提到了 BFS 本质上可以看做是在一个边权值为 1 的图上进行遍历。实际上，我们可以进行一个简单的扩展。如果图中边权值不全是 1，而是 0 和 1 呢？这样其实我们用到双端队列。</p><p>双端队列可以在头部和尾部同时进行插入和删除，而普通的队列仅允许在头部删除，在尾部插入。</p><p>使用双端队列，当每次取出一个状态的时候。如果我们可以<code>无代价</code>的进行转移，那么就可以将其直接放在队头，否则放在队尾。由<code>前面讲的队列的单调性和二值性</code>不难得出算法的正确性。而如果状态转移是有代价的，那么就将其放到队尾即可。这也是很多语言提供的内置数据结构是双端队列，而不是队列的原因之一。</p><p>如下图：</p><p><img src="https://p.ipic.vip/sbozez.jpg" alt=""></p><p>上面的队列是普通的队列。 而下面的双端队列，可以看出我们在队头插队了一个 B。</p><p>动图演示：</p><p><img src="https://p.ipic.vip/nj812l.jpg" alt="双端队列.svg"></p><blockquote><p>思考：如果图对应的权值不是 0 和 1，而是任意正整数呢？</p></blockquote><p>前面我们提到了<code>是不是不需要队列，就用哈希表，哈希集合啥的存就行了？</code> 这里为大家揭秘。不可以的。因为哈希表无法处理这里的权值为 0 的情况。</p><h3 id="dfs-和-bfs-的对比" tabindex="-1"><a class="header-anchor" href="#dfs-和-bfs-的对比" aria-hidden="true">#</a> DFS 和 BFS 的对比</h3><p>BFS 和 DFS 分别处理什么样的问题？两者究竟有什么样的区别？这些都值得我们认真研究。</p><p>简单来说，不管是 DFS 还是 BFS 都是对<code>题目对应的状态空间进行搜索</code>。</p><p>具体来说，二者区别在于：</p><ul><li>DFS 在分叉点会任选一条深入进入，遇到终点则返回，再次返回到分叉口后尝试下一个选择。基于此，我们可以在路径上记录一些数据。<code>由此也可以衍生出很多有趣的东西。</code></li></ul><p>如下图，我们遍历到 A，有三个选择。此时我们可以任意选择一条，比如选择了 B，程序会继续往下进行选择分支 2，3 。。。</p><p><img src="https://p.ipic.vip/pv1i95.jpg" alt=""></p><p>如下动图演示了一个典型的 DFS 流程。后面的章节，我们会给大家带来更复杂的图上 DFS。</p><p><img src="https://p.ipic.vip/p7rnza.gif" alt="binary-tree-traversal-dfs"></p><ul><li>BFS 在分叉点会选择搜索的路径各尝试一次。使用队列来存储待处理的元素时，队列中<code>最多</code>只会有两层的元素，且满足单调性，即相同层的元素在一起。<code>基于这个特点有很多有趣的优化。</code></li></ul><p>如下图，广度优先遍历会将搜索的选择全部选择一遍会才会进入到下一层。和上面一样，我给大家标注了程序执行的一种可能的顺序。</p><p><img src="https://p.ipic.vip/u8m52f.jpg" alt=""></p><p>可以发现，和我上面说的一样。右侧的队列始终最多有两层的节点，并且相同层的总在一起，换句话说队列的元素在层上<code>满足单调性</code>。</p><p>如下动图演示了一个典型的 BFS 流程。后面的章节，我们会给大家带来更复杂的图上 BFS。</p><p><img src="https://p.ipic.vip/oynlqu.gif" alt="binary-tree-traversal-bfs"></p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h2><p>以上就是《搜索篇（上）》的所有内容了。总结一下搜索篇的解题思路：</p><ul><li>根据题目信息构建状态空间（图）。</li><li>对图进行遍历（BFS 或者 DFS）</li><li>记录和维护状态。（比如 visited 维护访问情况， 队列和栈维护状态的决策方向等等）</li></ul><p>我们花了大量的篇幅对 BFS 和 DFS 进行了详细的讲解，包括两个的对比。</p><p>核心点需要大家注意：</p><ul><li>DFS 通常都是有递推关系的，而递归关系就是图的边。根据递归关系大家可以选择使用前序遍历或者后序遍历。</li><li>BFS 由于其单调性，因此适合求解最短距离问题。</li><li>。。。</li></ul><p>双向搜索的本质是将复杂度的常数项从一个影响较大的位置（比如指数位）移到了影响较小的位置（比如系数位）。</p><p>搜索篇知识点比较密集，希望大家多多总结复习。</p><p>下一节，我们介绍：</p><ul><li>回溯与剪枝。</li><li>常用的指标与统计方法。具体包括： <ol><li>树的深度与子树大小</li><li>图的 DFS 序</li><li>图的拓扑序</li><li>图的联通分量</li></ol></li></ul>`,105);function f(w,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("关于从递推关系分析使用何种遍历方法， 我在《91 天学算法》中的基础篇中的《模拟，枚举与递推》子专题中对此进行了详细的描述。91 学员可以直接进行查看。关于树的各种遍历方法，我在"),n("a",d,[s("树专题"),p(a)]),s("中进行了详细的介绍。")]),r,n("blockquote",null,[n("p",null,[s("如果不熟悉状态压缩，可以看下我的这篇文章 "),n("a",k,[s("状压 DP 是什么？这篇题解带你入门"),p(a)])])]),v,n("ul",null,[n("li",null,[n("a",b,[s("16. 最接近的三数之和"),p(a)])]),n("li",null,[n("a",m,[s("1049. 最后一块石头的重量 II"),p(a)])]),n("li",null,[n("a",h,[s("1774. 最接近目标价格的甜点成本"),p(a)])])]),g])}const F=e(l,[["render",f],["__file","09.html.vue"]]);export{F as default};
