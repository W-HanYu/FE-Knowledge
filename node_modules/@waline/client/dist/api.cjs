"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e={"Content-Type":"application/json"},t=(e,t="")=>{if("object"==typeof e&&e.errno)throw new TypeError(`Fetch ${t} failed with ${e.errno}: ${e.errmsg}`);return e},n=({serverURL:e,lang:n,paths:o,type:r,signal:a})=>fetch(`${e}/article?path=${encodeURIComponent(o.join(","))}&type=${encodeURIComponent(r.join(","))}&lang=${n}`,{signal:a}).then((e=>e.json())).then((e=>t(e,"article count"))),o=({serverURL:n,lang:o,path:r,type:a,action:s})=>fetch(`${n}/article?lang=${o}`,{method:"POST",headers:e,body:JSON.stringify({path:r,type:a,action:s})}).then((e=>e.json())).then((e=>t(e,"article count")));exports.deleteComment=({serverURL:e,lang:t,token:n,objectId:o})=>fetch(`${e}/comment/${o}?lang=${t}`,{method:"DELETE",headers:{Authorization:`Bearer ${n}`}}).then((e=>e.json())),exports.fetchArticleCounter=n,exports.fetchComment=({serverURL:e,lang:n,path:o,page:r,pageSize:a,sortBy:s,signal:i,token:h})=>{const c={};return h&&(c.Authorization=`Bearer ${h}`),fetch(`${e}/comment?path=${encodeURIComponent(o)}&pageSize=${a}&page=${r}&lang=${n}&sortBy=${s}`,{signal:i,headers:c}).then((e=>e.json())).then((e=>t(e,"comment data")))},exports.fetchCommentCount=({serverURL:e,lang:n,paths:o,signal:r})=>fetch(`${e}/comment?type=count&url=${encodeURIComponent(o.join(","))}&lang=${n}`,{signal:r,headers:{}}).then((e=>e.json())).then((e=>t(e,"comment count"))).then((e=>Array.isArray(e)?e:[e])),exports.fetchPageviews=({serverURL:e,lang:t,paths:o,signal:r})=>n({serverURL:e,lang:t,paths:o,type:["time"],signal:r}).then((e=>Array.isArray(e)?e:[e])),exports.fetchRecentComment=({serverURL:e,lang:n,count:o,signal:r,token:a})=>{const s={};return a&&(s.Authorization=`Bearer ${a}`),fetch(`${e}/comment?type=recent&count=${o}&lang=${n}`,{signal:r,headers:s}).then((e=>e.json())).then((e=>t(e,"recent comment")))},exports.fetchUserList=({serverURL:e,signal:n,pageSize:o,lang:r})=>fetch(`${e}/user?pageSize=${o}&lang=${r}`,{signal:n}).then((e=>e.json())).then((e=>t(e,"user list"))).then((e=>e.data)),exports.likeComment=({serverURL:t,lang:n,objectId:o,like:r})=>fetch(`${t}/comment/${o}?lang=${n}`,{method:"PUT",headers:e,body:JSON.stringify({like:r})}).then((e=>e.json())),exports.login=({lang:e,serverURL:t})=>{const n=(window.innerWidth-450)/2,o=(window.innerHeight-450)/2,r=window.open(`${t}/ui/login?lng=${encodeURIComponent(e)}`,"_blank",`width=450,height=450,left=${n},top=${o},scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no`);return r?.postMessage({type:"TOKEN",data:null},"*"),new Promise((e=>{const t=({data:n})=>{n&&"object"==typeof n&&"userInfo"===n.type&&n.data.token&&(r?.close(),window.removeEventListener("message",t),e(n.data))};window.addEventListener("message",t)}))},exports.postComment=({serverURL:e,lang:t,token:n,comment:o})=>{const r={"Content-Type":"application/json"};return n&&(r.Authorization=`Bearer ${n}`),o.eid?fetch(`${e}/comment/${o.eid}?lang=${t}`,{method:"PUT",headers:r,body:JSON.stringify(o)}).then((e=>e.json())):fetch(`${e}/comment?lang=${t}`,{method:"POST",headers:r,body:JSON.stringify(o)}).then((e=>e.json()))},exports.updateArticleCounter=o,exports.updateComment=({serverURL:t,lang:n,token:o,objectId:r,...a})=>fetch(`${t}/comment/${r}?lang=${n}`,{method:"PUT",headers:{...e,Authorization:`Bearer ${o}`},body:JSON.stringify(a)}).then((e=>e.json())),exports.updatePageviews=e=>o({...e,type:"time"});
//# sourceMappingURL=api.cjs.map
