interface FetchArticleCounterOptions {
    serverURL: string;
    lang: string;
    paths: string[];
    signal: AbortSignal;
    type: string[];
}
declare const fetchArticleCounter: ({ serverURL, lang, paths, type, signal, }: FetchArticleCounterOptions) => Promise<Record<string, number>[] | Record<string, number> | number[] | number>;
interface UpdateArticleCounterOptions {
    serverURL: string;
    lang: string;
    path: string;
    type: string;
    action?: 'inc' | 'desc';
}
declare const updateArticleCounter: ({ serverURL, lang, path, type, action, }: UpdateArticleCounterOptions) => Promise<number>;

interface WalineCommentData {
    /**
     * User Nickname
     */
    nick: string;
    /**
     * User email
     */
    mail: string;
    /**
     * User link
     */
    link?: string;
    /**
     * Content of comment
     */
    comment: string;
    /**
     * User Agent
     */
    ua: string;
    /**
     * Parent comment id
     */
    pid?: string;
    /**
     * Root comment id
     */
    rid?: string;
    /**
     * User id being at
     */
    at?: string;
    /**
     * edit comment id
     */
    eid?: string;
    /**
     * Comment link
     */
    url: string;
    /**
     * Recaptcha Token
     */
    recaptchaV3?: string;
}
declare type WalineCommentStatus = 'approved' | 'waiting' | 'spam';
interface WalineComment extends Exclude<WalineCommentData, 'ua'> {
    /**
     * User avatar
     */
    avatar: string;
    /**
     * User type
     */
    type?: 'administrator' | 'guest' | `verify:${string}`;
    objectId: string;
    /**
     * Time ISOString when the comment is created
     */
    createdAt: string;
    insertedAt: string;
    updatedAt: string;
    children: WalineComment[];
    sticky?: boolean;
    browser?: string;
    os?: string;
    level?: number;
    addr?: string;
    label?: string;
    user_id?: string | number;
    status?: WalineCommentStatus;
    like?: number;
    orig?: string;
}

interface FetchCommentOptions {
    serverURL: string;
    path: string;
    page: number;
    pageSize: number;
    sortBy: string;
    signal: AbortSignal;
    token?: string;
    lang: string;
}
interface CommentData {
    count: number;
    data: WalineComment[];
    totalPages: number;
}
declare const fetchComment: ({ serverURL, lang, path, page, pageSize, sortBy, signal, token, }: FetchCommentOptions) => Promise<CommentData>;
interface PostCommentOptions {
    serverURL: string;
    lang: string;
    token?: string;
    comment: WalineCommentData;
}
interface PostCommentResponse {
    data?: WalineComment;
    errmsg?: string;
}
declare const postComment: ({ serverURL, lang, token, comment, }: PostCommentOptions) => Promise<PostCommentResponse>;
interface DeleteCommentOptions {
    serverURL: string;
    lang: string;
    token: string;
    objectId: string | number;
}
declare const deleteComment: ({ serverURL, lang, token, objectId, }: DeleteCommentOptions) => Promise<void>;
interface LikeCommentOptions {
    serverURL: string;
    lang: string;
    objectId: number | string;
    like: boolean;
}
declare const likeComment: ({ serverURL, lang, objectId, like, }: LikeCommentOptions) => Promise<void>;
interface UpdateCommentOptions {
    serverURL: string;
    lang: string;
    token: string;
    objectId: number | string;
    status?: 'approved' | 'waiting' | 'spam';
    sticky?: number;
}
declare const updateComment: ({ serverURL, lang, token, objectId, ...data }: UpdateCommentOptions) => Promise<void>;

interface FetchCommentCountOptions {
    serverURL: string;
    lang: string;
    paths: string[];
    signal: AbortSignal;
}
declare const fetchCommentCount: ({ serverURL, lang, paths, signal, }: FetchCommentCountOptions) => Promise<number[]>;

interface LoginOptions {
    lang: string;
    serverURL: string;
}
interface UserInfo {
    display_name: string;
    email: string;
    url: string;
    token: string;
    avatar: string;
    mailMd5: string;
    objectId: string | number;
    type: 'administrator' | 'guest';
}
declare const login: ({ lang, serverURL, }: LoginOptions) => Promise<UserInfo & {
    remember: boolean;
}>;

interface FetchPageviewOptions {
    serverURL: string;
    lang: string;
    paths: string[];
    signal: AbortSignal;
}
declare const fetchPageviews: ({ serverURL, lang, paths, signal, }: FetchPageviewOptions) => Promise<number[]>;
interface UpdatePageviewOptions {
    serverURL: string;
    lang: string;
    path: string;
    action?: 'inc' | 'desc';
}
declare const updatePageviews: (options: UpdatePageviewOptions) => Promise<number>;

interface FetchRecentCommentOptions {
    serverURL: string;
    lang: string;
    count: number;
    signal: AbortSignal;
    token?: string;
}
declare const fetchRecentComment: ({ serverURL, lang, count, signal, token, }: FetchRecentCommentOptions) => Promise<WalineComment[]>;

interface FetchUserListOptions {
    serverURL: string;
    pageSize: number;
    signal: AbortSignal;
    lang: string;
}
interface WalineUser extends Pick<WalineComment, 'nick' | 'link' | 'avatar' | 'label' | 'level'> {
    count: number;
}
declare const fetchUserList: ({ serverURL, signal, pageSize, lang, }: FetchUserListOptions) => Promise<WalineUser[]>;

export { CommentData, DeleteCommentOptions, FetchArticleCounterOptions, FetchCommentCountOptions, FetchCommentOptions, FetchRecentCommentOptions, FetchUserListOptions, LikeCommentOptions, LoginOptions, PostCommentOptions, PostCommentResponse, UpdateArticleCounterOptions, UpdateCommentOptions, UpdatePageviewOptions, UserInfo, WalineUser, deleteComment, fetchArticleCounter, fetchComment, fetchCommentCount, fetchPageviews, fetchRecentComment, fetchUserList, likeComment, login, postComment, updateArticleCounter, updateComment, updatePageviews };
