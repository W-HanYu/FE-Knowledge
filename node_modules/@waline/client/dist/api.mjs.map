{"version":3,"file":"api.mjs","sources":["../src/api/utils.ts","../src/api/articleCounter.ts","../src/api/comment.ts","../src/api/commentCount.ts","../src/api/login.ts","../src/api/pageview.ts","../src/api/recentComment.ts","../src/api/user.ts"],"sourcesContent":["export interface FetchErrorData {\n  errno: number;\n  errmsg: string;\n}\n\nexport const JSON_HEADERS: Record<string, string> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'Content-Type': 'application/json',\n};\n\nexport const errorCheck = <T = unknown>(\n  data: T | FetchErrorData,\n  name = ''\n): T => {\n  if (typeof data === 'object' && (data as FetchErrorData).errno)\n    throw new TypeError(\n      `Fetch ${name} failed with ${(data as FetchErrorData).errno}: ${\n        (data as FetchErrorData).errmsg\n      }`\n    );\n\n  return data as T;\n};\n","import { JSON_HEADERS, errorCheck } from './utils';\n\nexport interface FetchArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n  type: string[];\n}\n\nexport const fetchArticleCounter = ({\n  serverURL,\n  lang,\n  paths,\n  type,\n  signal,\n}: FetchArticleCounterOptions): Promise<\n  Record<string, number>[] | Record<string, number> | number[] | number\n> =>\n  fetch(\n    `${serverURL}/article?path=${encodeURIComponent(\n      paths.join(',')\n    )}&type=${encodeURIComponent(type.join(','))}&lang=${lang}`,\n    { signal }\n  )\n    .then(\n      (resp) =>\n        resp.json() as Promise<Record<string, number>[] | number[] | number>\n    )\n    .then((data) => errorCheck(data, 'article count'));\n\nexport interface UpdateArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  path: string;\n  type: string;\n  action?: 'inc' | 'desc';\n}\n\nexport const updateArticleCounter = ({\n  serverURL,\n  lang,\n  path,\n  type,\n  action,\n}: UpdateArticleCounterOptions): Promise<number> =>\n  fetch(`${serverURL}/article?lang=${lang}`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify({ path, type, action }),\n  })\n    .then((resp) => resp.json() as Promise<number>)\n    .then((data) => errorCheck(data, 'article count'));\n","import { JSON_HEADERS, errorCheck } from './utils';\nimport type { WalineComment, WalineCommentData } from '../typings';\n\nexport interface FetchCommentOptions {\n  serverURL: string;\n  path: string;\n  page: number;\n  pageSize: number;\n  sortBy: string;\n  signal: AbortSignal;\n  token?: string;\n  lang: string;\n}\n\nexport interface CommentData {\n  count: number;\n  data: WalineComment[];\n  totalPages: number;\n}\n\nexport const fetchComment = ({\n  serverURL,\n  lang,\n  path,\n  page,\n  pageSize,\n  sortBy,\n  signal,\n  token,\n}: FetchCommentOptions): Promise<CommentData> => {\n  const headers: Record<string, string> = {};\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(\n    `${serverURL}/comment?path=${encodeURIComponent(\n      path\n    )}&pageSize=${pageSize}&page=${page}&lang=${lang}&sortBy=${sortBy}`,\n    { signal, headers }\n  )\n    .then((resp) => resp.json() as Promise<CommentData>)\n    .then((data) => errorCheck(data, 'comment data'));\n};\n\nexport interface PostCommentOptions {\n  serverURL: string;\n  lang: string;\n  token?: string;\n  comment: WalineCommentData;\n}\n\nexport interface PostCommentResponse {\n  data?: WalineComment;\n  errmsg?: string;\n}\n\nexport const postComment = ({\n  serverURL,\n  lang,\n  token,\n  comment,\n}: PostCommentOptions): Promise<PostCommentResponse> => {\n  const headers: Record<string, string> = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n  };\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  if (comment.eid) {\n    return fetch(`${serverURL}/comment/${comment.eid}?lang=${lang}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(comment),\n    }).then((resp) => resp.json() as Promise<PostCommentResponse>);\n  }\n\n  return fetch(`${serverURL}/comment?lang=${lang}`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(comment),\n  }).then((resp) => resp.json() as Promise<PostCommentResponse>);\n};\n\nexport interface DeleteCommentOptions {\n  serverURL: string;\n  lang: string;\n  token: string;\n  objectId: string | number;\n}\n\nexport const deleteComment = ({\n  serverURL,\n  lang,\n  token,\n  objectId,\n}: DeleteCommentOptions): Promise<void> =>\n  fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((resp) => resp.json() as Promise<void>);\n\nexport interface LikeCommentOptions {\n  serverURL: string;\n  lang: string;\n  objectId: number | string;\n  like: boolean;\n}\n\nexport const likeComment = ({\n  serverURL,\n  lang,\n  objectId,\n  like,\n}: LikeCommentOptions): Promise<void> =>\n  fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'PUT',\n    headers: JSON_HEADERS,\n    body: JSON.stringify({ like }),\n  }).then((resp) => resp.json() as Promise<void>);\n\nexport interface UpdateCommentOptions {\n  serverURL: string;\n  lang: string;\n  token: string;\n  objectId: number | string;\n  status?: 'approved' | 'waiting' | 'spam';\n  sticky?: number;\n}\n\nexport const updateComment = ({\n  serverURL,\n  lang,\n  token,\n  objectId,\n  ...data\n}: UpdateCommentOptions): Promise<void> =>\n  fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'PUT',\n    headers: {\n      ...JSON_HEADERS,\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(data),\n  }).then((resp) => resp.json() as Promise<void>);\n","import { errorCheck } from './utils';\n\nexport interface FetchCommentCountOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n}\n\nexport const fetchCommentCount = ({\n  serverURL,\n  lang,\n  paths,\n  signal,\n}: FetchCommentCountOptions): Promise<number[]> => {\n  const headers: Record<string, string> = {};\n\n  return (\n    fetch(\n      `${serverURL}/comment?type=count&url=${encodeURIComponent(\n        paths.join(',')\n      )}&lang=${lang}`,\n      { signal, headers }\n    )\n      .then((resp) => resp.json() as Promise<number | number[]>)\n      .then((data) => errorCheck(data, 'comment count'))\n      // TODO: Improve this API\n      .then((counts) => (Array.isArray(counts) ? counts : [counts]))\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nexport interface LoginOptions {\n  lang: string;\n  serverURL: string;\n}\n\nexport interface UserInfo {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  display_name: string;\n  email: string;\n  url: string;\n  token: string;\n  avatar: string;\n  mailMd5: string;\n  objectId: string | number;\n  type: 'administrator' | 'guest';\n}\n\nexport const login = ({\n  lang,\n  serverURL,\n}: LoginOptions): Promise<UserInfo & { remember: boolean }> => {\n  const width = 450;\n  const height = 450;\n  const left = (window.innerWidth - width) / 2;\n  const top = (window.innerHeight - height) / 2;\n\n  const handler = window.open(\n    `${serverURL}/ui/login?lng=${encodeURIComponent(lang)}`,\n    '_blank',\n    `width=${width},height=${height},left=${left},top=${top},scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no`\n  );\n\n  handler?.postMessage({ type: 'TOKEN', data: null }, '*');\n\n  return new Promise((resolve) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const receiver = ({ data }: any): void => {\n      if (!data || typeof data !== 'object' || data.type !== 'userInfo') return;\n\n      if (data.data.token) {\n        handler?.close();\n\n        window.removeEventListener('message', receiver);\n\n        resolve(data.data as UserInfo & { remember: boolean });\n      }\n    };\n\n    window.addEventListener('message', receiver);\n  });\n};\n","import { fetchArticleCounter, updateArticleCounter } from './articleCounter';\n\ninterface FetchPageviewOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n}\n\nexport const fetchPageviews = ({\n  serverURL,\n  lang,\n  paths,\n  signal,\n}: FetchPageviewOptions): Promise<number[]> =>\n  fetchArticleCounter({\n    serverURL,\n    lang,\n    paths,\n    type: ['time'],\n    signal,\n  })\n    // TODO: Improve this API\n    .then((counts) => (Array.isArray(counts) ? counts : [counts])) as Promise<\n    number[]\n  >;\n\nexport interface UpdatePageviewOptions {\n  serverURL: string;\n  lang: string;\n  path: string;\n  action?: 'inc' | 'desc';\n}\n\nexport const updatePageviews = (\n  options: UpdatePageviewOptions\n): Promise<number> =>\n  updateArticleCounter({\n    ...options,\n    type: 'time',\n  });\n","import { errorCheck } from './utils';\nimport type { WalineComment } from '../typings';\n\nexport interface FetchRecentCommentOptions {\n  serverURL: string;\n  lang: string;\n  count: number;\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport const fetchRecentComment = ({\n  serverURL,\n  lang,\n  count,\n  signal,\n  token,\n}: FetchRecentCommentOptions): Promise<WalineComment[]> => {\n  const headers: Record<string, string> = {};\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(`${serverURL}/comment?type=recent&count=${count}&lang=${lang}`, {\n    signal,\n    headers,\n  })\n    .then((resp) => resp.json() as Promise<WalineComment[]>)\n    .then((data) => errorCheck(data, 'recent comment'));\n};\n","import { WalineComment } from '../typings';\nimport { errorCheck } from './utils';\n\nexport interface FetchUserListOptions {\n  serverURL: string;\n  pageSize: number;\n  signal: AbortSignal;\n  lang: string;\n}\n\nexport interface WalineUser\n  extends Pick<WalineComment, 'nick' | 'link' | 'avatar' | 'label' | 'level'> {\n  count: number;\n}\n\nexport const fetchUserList = ({\n  serverURL,\n  signal,\n  pageSize,\n  lang,\n}: FetchUserListOptions): Promise<WalineUser[]> => {\n  return fetch(`${serverURL}/user?pageSize=${pageSize}&lang=${lang}`, {\n    signal,\n  })\n    .then(\n      (resp) =>\n        resp.json() as Promise<{\n          errno: number;\n          message: string;\n          data: WalineUser[];\n        }>\n    )\n    .then((resp) => errorCheck(resp, 'user list'))\n    .then((resp) => resp.data);\n};\n"],"names":["JSON_HEADERS","errorCheck","data","name","errno","TypeError","errmsg","fetchArticleCounter","serverURL","lang","paths","type","signal","fetch","encodeURIComponent","join","then","resp","json","updateArticleCounter","path","action","method","headers","body","JSON","stringify","fetchComment","page","pageSize","sortBy","token","Authorization","postComment","comment","eid","deleteComment","objectId","likeComment","like","updateComment","fetchCommentCount","counts","Array","isArray","login","left","window","innerWidth","top","innerHeight","handler","open","postMessage","Promise","resolve","receiver","close","removeEventListener","addEventListener","fetchPageviews","updatePageviews","options","fetchRecentComment","count","fetchUserList"],"mappings":"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"}