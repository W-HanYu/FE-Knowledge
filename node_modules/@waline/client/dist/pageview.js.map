{"version":3,"file":"pageview.js","sources":["../src/version.ts","../src/api/utils.ts","../src/api/pageview.ts","../src/api/articleCounter.ts","../src/utils/config.ts","../src/utils/path.ts","../src/utils/error.ts","../src/utils/query.ts","../src/pageview.ts"],"sourcesContent":["declare const VERSION: string;\n\nexport const version = VERSION;\n","export interface FetchErrorData {\n  errno: number;\n  errmsg: string;\n}\n\nexport const JSON_HEADERS: Record<string, string> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'Content-Type': 'application/json',\n};\n\nexport const errorCheck = <T = unknown>(\n  data: T | FetchErrorData,\n  name = ''\n): T => {\n  if (typeof data === 'object' && (data as FetchErrorData).errno)\n    throw new TypeError(\n      `Fetch ${name} failed with ${(data as FetchErrorData).errno}: ${\n        (data as FetchErrorData).errmsg\n      }`\n    );\n\n  return data as T;\n};\n","import { fetchArticleCounter, updateArticleCounter } from './articleCounter';\n\ninterface FetchPageviewOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n}\n\nexport const fetchPageviews = ({\n  serverURL,\n  lang,\n  paths,\n  signal,\n}: FetchPageviewOptions): Promise<number[]> =>\n  fetchArticleCounter({\n    serverURL,\n    lang,\n    paths,\n    type: ['time'],\n    signal,\n  })\n    // TODO: Improve this API\n    .then((counts) => (Array.isArray(counts) ? counts : [counts])) as Promise<\n    number[]\n  >;\n\nexport interface UpdatePageviewOptions {\n  serverURL: string;\n  lang: string;\n  path: string;\n  action?: 'inc' | 'desc';\n}\n\nexport const updatePageviews = (\n  options: UpdatePageviewOptions\n): Promise<number> =>\n  updateArticleCounter({\n    ...options,\n    type: 'time',\n  });\n","import { JSON_HEADERS, errorCheck } from './utils';\n\nexport interface FetchArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n  type: string[];\n}\n\nexport const fetchArticleCounter = ({\n  serverURL,\n  lang,\n  paths,\n  type,\n  signal,\n}: FetchArticleCounterOptions): Promise<\n  Record<string, number>[] | Record<string, number> | number[] | number\n> =>\n  fetch(\n    `${serverURL}/article?path=${encodeURIComponent(\n      paths.join(',')\n    )}&type=${encodeURIComponent(type.join(','))}&lang=${lang}`,\n    { signal }\n  )\n    .then(\n      (resp) =>\n        resp.json() as Promise<Record<string, number>[] | number[] | number>\n    )\n    .then((data) => errorCheck(data, 'article count'));\n\nexport interface UpdateArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  path: string;\n  type: string;\n  action?: 'inc' | 'desc';\n}\n\nexport const updateArticleCounter = ({\n  serverURL,\n  lang,\n  path,\n  type,\n  action,\n}: UpdateArticleCounterOptions): Promise<number> =>\n  fetch(`${serverURL}/article?lang=${lang}`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify({ path, type, action }),\n  })\n    .then((resp) => resp.json() as Promise<number>)\n    .then((data) => errorCheck(data, 'article count'));\n","import {\n  defaultLang,\n  defaultLocales,\n  defaultReaction,\n  defaultUploadImage,\n  defaultHighlighter,\n  defaultTexRenderer,\n  getDefaultSearchOptions,\n  getMeta,\n} from '../config';\n\nimport { decodePath, isLinkHttp, removeEndingSplash } from './path';\n\nimport type {\n  WalineEmojiInfo,\n  WalineEmojiMaps,\n  WalineLocale,\n  WalineProps,\n} from '../typings';\n\nexport interface WalineEmojiConfig {\n  tabs: Pick<WalineEmojiInfo, 'name' | 'icon' | 'items'>[];\n  map: WalineEmojiMaps;\n}\n\nexport interface WalineConfig\n  extends Required<Omit<WalineProps, 'wordLimit' | 'reaction'>> {\n  locale: WalineLocale;\n  wordLimit: [number, number] | false;\n  reaction: string[];\n}\n\nexport const getServerURL = (serverURL: string): string => {\n  const result = removeEndingSplash(serverURL);\n\n  return isLinkHttp(result) ? result : `https://${result}`;\n};\n\nconst getWordLimit = (\n  wordLimit: WalineProps['wordLimit']\n): [number, number] | false =>\n  Array.isArray(wordLimit) ? wordLimit : wordLimit ? [0, wordLimit] : false;\n\nconst fallback = <T = unknown>(\n  value: T | false | undefined,\n  fallback: T\n): T | false =>\n  typeof value === 'function' ? value : value === false ? false : fallback;\n\nexport const getConfig = ({\n  serverURL,\n\n  path = location.pathname,\n  lang = defaultLang,\n  locale,\n  emoji = ['//unpkg.com/@waline/emojis@1.1.0/weibo'],\n  meta = ['nick', 'mail', 'link'],\n  requiredMeta = [],\n  dark = false,\n  pageSize = 10,\n  wordLimit,\n  imageUploader,\n  highlighter,\n  texRenderer,\n  copyright = true,\n  login = 'enable',\n  search,\n  reaction,\n  recaptchaV3Key = '',\n  ...more\n}: WalineProps): WalineConfig => ({\n  serverURL: getServerURL(serverURL),\n  path: decodePath(path),\n  locale: {\n    ...(defaultLocales[lang] || defaultLocales[defaultLang]),\n    ...(typeof locale === 'object' ? locale : {}),\n  } as WalineLocale,\n  wordLimit: getWordLimit(wordLimit),\n  meta: getMeta(meta),\n  requiredMeta: getMeta(requiredMeta),\n  imageUploader: fallback(imageUploader, defaultUploadImage),\n  highlighter: fallback(highlighter, defaultHighlighter),\n  texRenderer: fallback(texRenderer, defaultTexRenderer),\n  lang,\n  dark,\n  emoji,\n  pageSize,\n  login,\n  copyright,\n  search: search || getDefaultSearchOptions(lang),\n  recaptchaV3Key,\n  reaction: Array.isArray(reaction)\n    ? reaction\n    : reaction === true\n    ? defaultReaction\n    : [],\n  ...more,\n});\n","export const decodePath = (path: string): string => {\n  try {\n    path = decodeURI(path);\n  } catch (err) {\n    // ignore error\n  }\n\n  return path;\n};\n\nexport const removeEndingSplash = (content = ''): string =>\n  content.replace(/\\/$/u, '');\n\nexport const isLinkHttp = (link: string): boolean =>\n  /^(https?:)?\\/\\//.test(link);\n","export const errorHandler = (err: Error): void => {\n  if (err.name !== 'AbortError') console.error(err.message);\n};\n","export const getQuery = (element: HTMLElement): string | null =>\n  element.dataset.path || element.getAttribute('id');\n","import { fetchPageviews, updatePageviews } from './api';\nimport { errorHandler, getQuery, getServerURL } from './utils';\n\nimport type { WalineAbort } from './typings';\n\nexport interface WalinePageviewCountOptions {\n  /**\n   * Waline 服务端地址\n   *\n   * Waline server url\n   */\n  serverURL: string;\n\n  /**\n   * 浏览量 CSS 选择器\n   *\n   * Pageview CSS selector\n   *\n   * @default '.waline-pageview-count'\n   */\n  selector?: string;\n\n  /**\n   * 需要更新和获取的路径\n   *\n   * Path to be fetched and updated\n   *\n   * @default window.location.pathname\n   */\n  path?: string;\n\n  /**\n   * 是否在查询时更新 path 的浏览量\n   *\n   * Whether update pageviews when fetching path result\n   *\n   * @default true\n   */\n  update?: boolean;\n\n  /**\n   * 错误提示消息所使用的语言\n   *\n   * Language of error message\n   *\n   * @default 'zh-CN'\n   */\n  lang?: string;\n}\n\nconst renderVisitorCount = (\n  counts: number[],\n  countElements: HTMLElement[]\n): void => {\n  countElements.forEach((element, index) => {\n    element.innerText = counts[index].toString();\n  });\n};\n\nexport const pageviewCount = ({\n  serverURL,\n  path = window.location.pathname,\n  selector = '.waline-pageview-count',\n  update = true,\n  lang = 'zh-CN',\n}: WalinePageviewCountOptions): WalineAbort => {\n  const controller = new AbortController();\n\n  const elements = Array.from(\n    // pageview selectors\n    document.querySelectorAll<HTMLElement>(selector)\n  );\n\n  const filter = (element: HTMLElement): boolean => {\n    const query = getQuery(element);\n\n    return query !== null && path !== query;\n  };\n\n  const fetch = (elements: HTMLElement[]): Promise<void> =>\n    fetchPageviews({\n      serverURL: getServerURL(serverURL),\n      paths: elements.map((element) => getQuery(element) || path),\n      lang,\n      signal: controller.signal,\n    })\n      .then((counts) => renderVisitorCount(counts, elements))\n      .catch(errorHandler);\n\n  // we should update pageviews\n  if (update) {\n    const normalElements = elements.filter((element) => !filter(element));\n    const elementsNeedstoBeFetched = elements.filter(filter);\n\n    void updatePageviews({\n      serverURL: getServerURL(serverURL),\n      path,\n      lang,\n    }).then((count) =>\n      renderVisitorCount(\n        new Array<number>(normalElements.length).fill(count),\n        normalElements\n      )\n    );\n\n    // if we should fetch count of other pages\n    if (elementsNeedstoBeFetched.length) {\n      void fetch(elementsNeedstoBeFetched);\n    }\n  }\n  // we should not update pageviews\n  else {\n    void fetch(elements);\n  }\n\n  return controller.abort.bind(controller);\n};\n"],"names":["JSON_HEADERS","errorCheck","data","name","errno","TypeError","errmsg","fetchPageviews","_ref3","serverURL","lang","paths","signal","_ref","type","fetch","encodeURIComponent","join","then","resp","json","fetchArticleCounter","counts","Array","isArray","updatePageviews","options","_ref2","path","action","method","headers","body","JSON","stringify","updateArticleCounter","getServerURL","result","replace","removeEndingSplash","test","errorHandler","err","console","error","message","getQuery","element","dataset","getAttribute","renderVisitorCount","countElements","forEach","index","innerText","toString","_ref4","window","location","pathname","selector","update","controller","AbortController","elements","from","document","querySelectorAll","filter","query","map","catch","normalElements","elementsNeedstoBeFetched","count","length","fill","abort","bind"],"mappings":"sXAEuB,SCGhB,MAAMA,EAAuC,CAElD,eAAgB,oBAGLC,EAAa,SACxBC,GAEK,IADLC,yDAAO,GAEP,GAAoB,iBAATD,GAAsBA,EAAwBE,MACvD,MAAM,IAAIC,UACR,SAASF,iBAAqBD,EAAwBE,UACnDF,EAAwBI,UAI/B,OAAOJ,CACR,ECbYK,EAAiBC,IAAA,IAACC,UAC7BA,EAD6BC,KAE7BA,EAF6BC,MAG7BA,EAH6BC,OAI7BA,GAJ4BJ,EAAA,MCCKK,KAAA,IAACJ,UAClCA,EADkCC,KAElCA,EAFkCC,MAGlCA,EAHkCG,KAIlCA,EAJkCF,OAKlCA,GALiCC,EAAA,OASjCE,MACK,GAAAN,kBAA0BO,mBAC3BL,EAAMM,KAAK,cACHD,mBAAmBF,EAAKG,KAAK,cAAcP,IACrD,CAAEE,WAEDM,MACEC,GACCA,EAAKC,SAERF,MAAMhB,GAASD,EAAWC,EAAM,kBAnBF,EDKjCmB,CAAoB,CAClBZ,YACAC,OACAC,QACAG,KAAM,CAAC,QACPF,WAGCM,MAAMI,GAAYC,MAAMC,QAAQF,GAAUA,EAAS,CAACA,IAd3B,EAyBjBG,EACXC,GCIkCC,KAAA,IAAClB,UACnCA,EADmCC,KAEnCA,EAFmCkB,KAGnCA,EAHmCd,KAInCA,EAJmCe,OAKnCA,GALkCF,EAAA,OAOlCZ,MAAM,GAAGN,kBAA0BC,IAAQ,CACzCoB,OAAQ,OACRC,QAAS/B,EACTgC,KAAMC,KAAKC,UAAU,CAAEN,OAAMd,OAAMe,aAElCX,MAAMC,GAASA,EAAKC,SACpBF,MAAMhB,GAASD,EAAWC,EAAM,kBAbD,EDFlCiC,CAAqB,IAChBT,EACHZ,KAAM,SEPGsB,EAAgB3B,IAC3B,MAAM4B,ECvB0B,WAAA,8DAAW,IACnCC,QAAQ,OAAQ,GADQ,CDuBjBC,CAAmB9B,GAElC,MCrBA,kBAAkB+B,KDqBAH,GAAUA,EAAoB,WAAAA,GAAhD,EEnCWI,EAAgBC,IACV,eAAbA,EAAIvC,MAAuBwC,QAAQC,MAAMF,EAAIG,QAAlB,ECDpBC,EAAYC,GACvBA,EAAQC,QAAQpB,MAAQmB,EAAQE,aAAa,MCiDzCC,EAAqB,CACzB5B,EACA6B,KAEAA,EAAcC,SAAQ,CAACL,EAASM,KAC9BN,EAAQO,UAAYhC,EAAO+B,GAAOE,UAAlC,GADF,kBAK2BC,IAMiB,IANhB/C,UAC5BA,EAD4BmB,KAE5BA,EAAO6B,OAAOC,SAASC,SAFKC,SAG5BA,EAAW,yBAHiBC,OAI5BA,GAAS,EAJmBnD,KAK5BA,EAAO,SACqC8C,EAC5C,MAAMM,EAAa,IAAIC,gBAEjBC,EAAWzC,MAAM0C,KAErBC,SAASC,iBAA8BP,IAGnCQ,EAAUrB,IACd,MAAMsB,EAAQvB,EAASC,GAEvB,OAAiB,OAAVsB,GAAkBzC,IAASyC,CAAlC,EAGItD,EAASiD,GACbzD,EAAe,CACbE,UAAW2B,EAAa3B,GACxBE,MAAOqD,EAASM,KAAKvB,GAAYD,EAASC,IAAYnB,IACtDlB,OACAE,OAAQkD,EAAWlD,SAElBM,MAAMI,GAAW4B,EAAmB5B,EAAQ0C,KAC5CO,MAAM9B,GAGX,GAAIoB,EAAQ,CACV,MAAMW,EAAiBR,EAASI,QAAQrB,IAAaqB,EAAOrB,KACtD0B,EAA2BT,EAASI,OAAOA,GAE5C3C,EAAgB,CACnBhB,UAAW2B,EAAa3B,GACxBmB,OACAlB,SACCQ,MAAMwD,GACPxB,EACE,IAAI3B,MAAciD,EAAeG,QAAQC,KAAKF,GAC9CF,KAKAC,EAAyBE,QACtB5D,EAAM0D,EAEd,MAGM1D,EAAMiD,GAGb,OAAOF,EAAWe,MAAMC,KAAKhB,EAA7B"}