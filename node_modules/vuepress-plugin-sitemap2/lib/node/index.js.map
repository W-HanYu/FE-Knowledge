{"version":3,"file":"index.js","sources":["../../src/node/utils.ts","../../src/node/compact/utils.ts","../../src/node/compact/convert.ts","../../src/node/generateSitemap.ts","../../src/node/plugin.ts"],"sourcesContent":["import { Logger } from \"vuepress-shared/node\";\n\nexport const logger = new Logger(\"vuepress-plugin-sitemap2\");\n","import { logger } from \"../utils.js\";\n\nexport interface DeprecatedLoggerOptions {\n  options: Record<string, unknown>;\n  deprecatedOption: string;\n  newOption: string;\n  msg?: string;\n  scope?: string;\n}\n\nexport const deprecatedLogger = ({\n  options,\n  deprecatedOption,\n  newOption,\n  msg = \"\",\n  scope = \"\",\n}: DeprecatedLoggerOptions): void => {\n  if (deprecatedOption in options) {\n    logger.warn(\n      `\"${deprecatedOption}\" is deprecated${\n        scope ? ` in ${scope}` : \"\"\n      }, please use \"${newOption}\" instead.${msg ? `\\n${msg}` : \"\"}`\n    );\n\n    if (newOption.includes(\".\")) {\n      const keys = newOption.split(\".\");\n      let temp = options;\n\n      keys.forEach((key, index) => {\n        if (index !== keys.length - 1) {\n          // ensure level exists\n          temp[key] = temp[key] || {};\n\n          temp = temp[key] as Record<string, unknown>;\n        } else temp[key] = options[deprecatedOption];\n      });\n    } else options[newOption] = options[deprecatedOption];\n\n    delete options[deprecatedOption];\n  }\n};\n","import { deprecatedLogger } from \"./utils.js\";\nimport type { SitemapOptions } from \"../../shared/index.js\";\n\n/** @deprecated */\nexport const convertOptions = (\n  options: SitemapOptions & Record<string, unknown>\n): void => {\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"urls\",\n    newOption: \"extraUrls\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"exclude\",\n    newOption: \"excludeUrls\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"outFile\",\n    newOption: \"sitemapFilename\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"dateFormatter\",\n    newOption: \"modifyTimeGetter\",\n  });\n};\n","import {\n  isLinkHttp,\n  removeEndingSlash,\n  removeLeadingSlash,\n} from \"@vuepress/shared\";\nimport { chalk, fs, withSpinner } from \"@vuepress/utils\";\nimport { SitemapStream } from \"sitemap\";\nimport { logger } from \"./utils.js\";\n\nimport type { App, Page } from \"@vuepress/core\";\nimport type { GitData } from \"@vuepress/plugin-git\";\nimport type {\n  ModifyTimeGetter,\n  SitemapFrontmatterOption,\n  SitemapImageOption,\n  SitemapLinkOption,\n  SitemapNewsOption,\n  SitemapOptions,\n  SitemapVideoOption,\n} from \"../shared/index.js\";\n\ninterface SitemapPageInfo {\n  lastmod?: string;\n  changefreq?: string;\n  priority?: number;\n  img?: SitemapImageOption[];\n  video?: SitemapVideoOption[];\n  links?: SitemapLinkOption[];\n  news?: SitemapNewsOption[];\n}\n\nconst reportedLocales: string[] = [];\n\nconst stripLocalePrefix = (\n  page: Page\n): {\n  // path of root locale\n  defaultPath: string;\n  // Locale path prefix of the page\n  pathLocale: string;\n} => ({\n  defaultPath: page.path.replace(page.pathLocale, \"/\"),\n  pathLocale: page.pathLocale,\n});\n\nconst generatePageMap = (\n  app: App,\n  options: SitemapOptions\n): Map<string, SitemapPageInfo> => {\n  const {\n    changefreq,\n    excludeUrls = [\"/404.html\"],\n    modifyTimeGetter = <ModifyTimeGetter>(\n      ((page: Page<{ git: GitData }>): string =>\n        page.data.git?.updatedTime\n          ? new Date(page.data.git.updatedTime).toISOString()\n          : \"\")\n    ),\n  } = options;\n\n  const {\n    pages,\n    options: { base, locales },\n  } = app;\n\n  const pageLocalesMap = pages.reduce(\n    (map, page) => {\n      const { defaultPath, pathLocale } = stripLocalePrefix(page);\n      const pathLocales = map.get(defaultPath) || [];\n\n      pathLocales.push(pathLocale);\n\n      return map.set(defaultPath, pathLocales);\n    },\n    // a map with keys of defaultPath and string[] value with pathLocales\n    new Map<string, string[]>()\n  );\n\n  const pagesMap = new Map<string, SitemapPageInfo>();\n\n  pages.forEach((page) => {\n    const frontmatterOptions: SitemapFrontmatterOption =\n      <SitemapFrontmatterOption>page.frontmatter[\"sitemap\"] || {};\n\n    const metaRobotTags = (page.frontmatter.head || []).find(\n      (head) => head[1][\"name\"] === \"robots\"\n    );\n\n    const excludePage = metaRobotTags\n      ? (<string>metaRobotTags[1][\"content\"] || \"\")\n          .split(/,/u)\n          .map((content) => content.trim())\n          .includes(\"noindex\")\n      : frontmatterOptions.exclude;\n\n    if (excludePage || excludeUrls.includes(page.path)) return;\n\n    const lastmodifyTime = modifyTimeGetter(page);\n    const { defaultPath } = stripLocalePrefix(page);\n    const relatedLocales = pageLocalesMap.get(defaultPath) || [];\n\n    let links: SitemapLinkOption[] = [];\n\n    if (relatedLocales.length > 1) {\n      // warnings for missing `locale[path].lang` in debug mode\n      if (app.env.isDebug)\n        relatedLocales.forEach((localePrefix) => {\n          if (\n            !locales[localePrefix].lang &&\n            !reportedLocales.includes(localePrefix)\n          ) {\n            logger.warn(`'lang' option for ${localePrefix} is missing`);\n            reportedLocales.push(localePrefix);\n          }\n        });\n\n      links = relatedLocales.map((localePrefix) => ({\n        lang: locales[localePrefix]?.lang || \"en\",\n        url: `${base}${removeLeadingSlash(\n          defaultPath.replace(/^\\//u, localePrefix)\n        )}`,\n      }));\n    }\n\n    const sitemapInfo: SitemapPageInfo = {\n      ...(changefreq ? { changefreq } : {}),\n      links,\n      ...(lastmodifyTime ? { lastmod: lastmodifyTime } : {}),\n      ...frontmatterOptions,\n    };\n\n    // log sitemap info in debug mode\n    if (app.env.isDebug) {\n      logger.info(\n        `sitemap option for ${page.path}: ${JSON.stringify(\n          sitemapInfo,\n          null,\n          2\n        )}`\n      );\n    }\n\n    pagesMap.set(page.path, sitemapInfo);\n  });\n\n  return pagesMap;\n};\n\nexport const generateSiteMap = async (\n  app: App,\n  options: SitemapOptions\n): Promise<void> => {\n  const { extraUrls = [], xmlNameSpace: xmlns } = options;\n  const hostname = isLinkHttp(options.hostname)\n    ? removeEndingSlash(options.hostname)\n    : `https://${removeEndingSlash(options.hostname)}`;\n  const sitemapFilename = options.sitemapFilename\n    ? removeLeadingSlash(options.sitemapFilename)\n    : \"sitemap.xml\";\n  const {\n    dir,\n    options: { base },\n  } = app;\n\n  await withSpinner(`Generating sitemap to ${chalk.cyan(sitemapFilename)}`)(\n    () =>\n      new Promise<void>((resolve) => {\n        const sitemap = new SitemapStream({\n          hostname,\n          ...(xmlns ? { xmlns } : {}),\n        });\n        const pagesMap = generatePageMap(app, options);\n        const sitemapXMLPath = dir.dest(sitemapFilename);\n        const writeStream = fs.createWriteStream(sitemapXMLPath);\n\n        sitemap.pipe(writeStream);\n\n        pagesMap.forEach((page, path) =>\n          sitemap.write({\n            url: `${base}${removeLeadingSlash(path)}`,\n            ...page,\n          })\n        );\n\n        extraUrls.forEach((item) =>\n          sitemap.write({ url: `${base}${removeLeadingSlash(item)}` })\n        );\n        sitemap.end(() => {\n          resolve();\n        });\n      })\n  );\n\n  const robotTxtPath = dir.dest(\"robots.txt\");\n\n  if (fs.existsSync(robotTxtPath)) {\n    await withSpinner(`Appended sitemap path to ${chalk.cyan(\"robots.txt\")}`)(\n      async () => {\n        const robotsTxt = await fs.readFile(robotTxtPath, { encoding: \"utf8\" });\n\n        const newRobotsTxtContent = `${robotsTxt.replace(\n          /^Sitemap: .*$/u,\n          \"\"\n        )}\\nSitemap: ${hostname}${base}${sitemapFilename}\\n`;\n\n        await fs.writeFile(robotTxtPath, newRobotsTxtContent, { flag: \"w\" });\n      }\n    );\n  }\n};\n","import { chalk } from \"@vuepress/utils\";\nimport { convertOptions } from \"./compact/index.js\";\nimport { generateSiteMap } from \"./generateSitemap.js\";\nimport { logger } from \"./utils.js\";\n\nimport type { PluginObject, PluginFunction } from \"@vuepress/core\";\nimport type { SitemapOptions } from \"../shared/index.js\";\n\nexport const sitemapPlugin =\n  (options: SitemapOptions, legacy = false): PluginFunction =>\n  (app) => {\n    // TODO: Remove it in v2 stable\n    if (legacy)\n      convertOptions(options as SitemapOptions & Record<string, unknown>);\n    if (app.env.isDebug) logger.info(`Options: ${options.toString()}`);\n\n    const plugin: PluginObject = {\n      name: \"vuepress-plugin-sitemap2\",\n    };\n\n    if (!options.hostname) {\n      logger.error(`Option ${chalk.magenta(\"hostname\")} is required!`);\n\n      return plugin;\n    }\n\n    return {\n      ...plugin,\n\n      onGenerated: (app): Promise<void> => generateSiteMap(app, options),\n    };\n  };\n"],"names":["logger","Logger","deprecatedLogger","options","deprecatedOption","newOption","msg","scope","keys","temp","key","index","convertOptions","reportedLocales","stripLocalePrefix","page","generatePageMap","app","changefreq","excludeUrls","modifyTimeGetter","_a","pages","base","locales","pageLocalesMap","map","defaultPath","pathLocale","pathLocales","pagesMap","frontmatterOptions","metaRobotTags","head","content","lastmodifyTime","relatedLocales","links","localePrefix","removeLeadingSlash","sitemapInfo","generateSiteMap","extraUrls","xmlns","hostname","isLinkHttp","removeEndingSlash","sitemapFilename","dir","withSpinner","chalk","resolve","sitemap","SitemapStream","sitemapXMLPath","writeStream","fs","path","item","robotTxtPath","newRobotsTxtContent","sitemapPlugin","legacy","plugin"],"mappings":"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"}